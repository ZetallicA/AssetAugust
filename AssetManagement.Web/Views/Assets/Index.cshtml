@model PaginatedList<AssetManagement.Domain.Entities.Asset>

@{
    ViewData["Title"] = "Assets";
    
    // Helper function to generate route values with all filter parameters
    Dictionary<string, string> GenerateSortRouteValues(string sortOrder)
    {
        var routeValues = new Dictionary<string, string>();
        
        if (!string.IsNullOrEmpty(sortOrder))
            routeValues["sortOrder"] = sortOrder;
            
        if (ViewData["CurrentFilter"] != null)
            routeValues["searchTerm"] = ViewData["CurrentFilter"].ToString();
            
        routeValues["pageSize"] = Model.PageSize.ToString();
        
        if (ViewData["FilterAssetTag"] != null)
            routeValues["filterAssetTag"] = ViewData["FilterAssetTag"].ToString();
        if (ViewData["FilterSerialNumber"] != null)
            routeValues["filterSerialNumber"] = ViewData["FilterSerialNumber"].ToString();
        if (ViewData["FilterServiceTag"] != null)
            routeValues["filterServiceTag"] = ViewData["FilterServiceTag"].ToString();
        if (ViewData["FilterManufacturer"] != null)
            routeValues["filterManufacturer"] = ViewData["FilterManufacturer"].ToString();
        if (ViewData["FilterModel"] != null)
            routeValues["filterModel"] = ViewData["FilterModel"].ToString();
        if (ViewData["FilterCategory"] != null)
            routeValues["filterCategory"] = ViewData["FilterCategory"].ToString();
        if (ViewData["FilterNetName"] != null)
            routeValues["filterNetName"] = ViewData["FilterNetName"].ToString();
        if (ViewData["FilterAssignedUser"] != null)
            routeValues["filterAssignedUser"] = ViewData["FilterAssignedUser"].ToString();
        if (ViewData["FilterManager"] != null)
            routeValues["filterManager"] = ViewData["FilterManager"].ToString();
        if (ViewData["FilterDepartment"] != null)
            routeValues["filterDepartment"] = ViewData["FilterDepartment"].ToString();
        if (ViewData["FilterLocation"] != null)
            routeValues["filterLocation"] = ViewData["FilterLocation"].ToString();
        if (ViewData["FilterFloor"] != null)
            routeValues["filterFloor"] = ViewData["FilterFloor"].ToString();
        if (ViewData["FilterDesk"] != null)
            routeValues["filterDesk"] = ViewData["FilterDesk"].ToString();
        if (ViewData["FilterStatus"] != null)
            routeValues["filterStatus"] = ViewData["FilterStatus"].ToString();
        if (ViewData["FilterVendor"] != null)
            routeValues["filterVendor"] = ViewData["FilterVendor"].ToString();
        if (ViewData["FilterWarrantyEnd"] != null)
            routeValues["filterWarrantyEnd"] = ViewData["FilterWarrantyEnd"].ToString();
            
        return routeValues;
    }
}

@Html.AntiForgeryToken()

<style>
    .pagination .page-link {
        color: #007bff;
        border-color: #dee2e6;
    }
    
    .pagination .page-item.active .page-link {
        background-color: #007bff;
        border-color: #007bff;
        color: white;
    }
    
    .pagination .page-link:hover {
        color: #0056b3;
        background-color: #e9ecef;
        border-color: #dee2e6;
    }
    
    .sortable-header {
        cursor: pointer;
        user-select: none;
    }
    
    .sortable-header:hover {
        background-color: #f8f9fa;
    }
    
    /* Admin Operations Collapsible Styles */
    .admin-operations-header {
        transition: background-color 0.2s ease;
    }
    
    .admin-operations-header:hover {
        background-color: #ffc107 !important;
    }
    
    .admin-operations-body {
        transition: all 0.3s ease;
    }
    
    .admin-operations-icon {
        transition: transform 0.2s ease;
    }
    
         .table-container {
         overflow-x: auto;
         scroll-behavior: smooth;
     }
     
     /* Compact table styles */
     .table {
         font-size: 0.875rem;
     }
     
     .table th {
         font-size: 0.8rem;
         font-weight: 600;
         white-space: normal;
         word-wrap: break-word;
         max-width: 120px;
         min-width: 80px;
         vertical-align: top;
         padding: 0.5rem 0.25rem;
         line-height: 1.2;
     }
     
     .table td {
         font-size: 0.8rem;
         padding: 0.375rem 0.25rem;
         max-width: 120px;
         overflow: hidden;
         text-overflow: ellipsis;
         white-space: nowrap;
         vertical-align: middle;
     }
     
     .table td:hover {
         overflow: visible;
         white-space: normal;
         word-wrap: break-word;
         background-color: #f8f9fa;
         position: relative;
         z-index: 10;
     }
     
     /* Tooltip for truncated text */
     .table td[title] {
         cursor: help;
     }
     
     /* Compact badges */
     .badge {
         font-size: 0.7rem;
         padding: 0.25rem 0.5rem;
     }
     
     /* Compact buttons */
     .btn-group-sm .btn {
         padding: 0.25rem 0.5rem;
         font-size: 0.75rem;
     }
     
     /* Compact form controls */
     .form-select-sm {
         font-size: 0.8rem;
         padding: 0.25rem 0.5rem;
         margin-left: 0.5rem;
     }
     
     /* Ensure dropdown arrow doesn't overlap with text */
     .form-select {
     
     /* Inline editing styles */
     .editable-cell {
         cursor: pointer;
         transition: background-color 0.2s;
     }
     
     .editable-cell:hover {
         background-color: #e3f2fd !important;
         border: 1px solid #2196f3;
     }
     
     .editable-cell.editing {
         padding: 0 !important;
         background-color: #fff !important;
         border: 2px solid #2196f3 !important;
     }
     
     .editable-cell.editing input,
     .editable-cell.editing select {
         width: 100%;
         height: 100%;
         border: none;
         outline: none;
         padding: 0.375rem 0.25rem;
         font-size: 0.8rem;
         background-color: transparent;
     }
     
     .editable-cell.editing input:focus,
     .editable-cell.editing select:focus {
         box-shadow: none;
     }
     
     .editable-cell .badge {
         cursor: pointer;
     }
     
     .editable-cell.editing .badge {
         display: none;
     }
     
     .editable-cell.editing select {
         background-color: white;
         border: 1px solid #ccc;
     }
     
     /* Status dropdown styling */
     .status-dropdown {
         width: 100%;
         padding: 0.25rem;
         font-size: 0.75rem;
         border: none;
         outline: none;
     }
     
     /* Location dropdown styling */
     .location-dropdown {
         width: 100%;
         padding: 0.25rem;
         font-size: 0.75rem;
         border: none;
         outline: none;
     }
         background-position: right 0.375rem center;
         padding-right: 1.5rem;
     }
    
    /* Inline navigation styles */
    .table-navigation-inline {
        display: flex;
        gap: 5px;
        align-items: center;
        justify-content: center;
        margin: 0 10px;
    }
    
    .nav-arrow-inline {
        background: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 4px;
        width: 28px;
        height: 28px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.2s ease;
        color: #6c757d;
    }
    
    .nav-arrow-inline:hover {
        background: #e9ecef;
        border-color: #adb5bd;
        color: #495057;
    }
    
    .nav-arrow-inline.disabled {
        opacity: 0.3;
        cursor: not-allowed;
        background: #f8f9fa;
        color: #adb5bd;
    }
    
    /* Progress bar styles */
    .scroll-progress-container {
        position: relative;
        width: 60px;
        height: 4px;
        background: #e9ecef;
        border-radius: 2px;
        margin: 0 8px;
        overflow: hidden;
    }
    
    .scroll-progress-bar {
        height: 100%;
        background: #007bff;
        border-radius: 2px;
        width: 0%;
        transition: width 0.3s ease;
    }
    
    /* Drag and drop styles */
    .visible-column-item {
        background: #fff;
        transition: all 0.2s ease;
    }
    
    .visible-column-item:hover {
        background: #f8f9fa;
    }
    
    .visible-column-item.dragging {
        opacity: 0.5;
        transform: rotate(2deg);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    
    .visible-column-item.drag-over {
        border-color: #007bff;
        background: #e3f2fd;
        transform: scale(1.02);
    }
    
    .drag-handle {
        cursor: grab;
    }
    
    .drag-handle:active {
        cursor: grabbing;
    }
</style>

<div class="row mb-4">
    <div class="col-12">
        <h1 class="display-6">
            <i class="bi bi-pc-display text-primary"></i> Assets
        </h1>
    </div>
</div>

    <div class="card shadow mb-3">
        <div class="card-header bg-warning text-dark admin-operations-header" style="cursor: pointer;" onclick="toggleAdminOperations()">
            <div class="d-flex justify-content-between align-items-center">
                <h6 class="mb-0"><i class="bi bi-exclamation-triangle"></i> System Admin Operations</h6>
                <i class="bi bi-chevron-down admin-operations-icon" id="adminOperationsIcon"></i>
            </div>
        </div>
        <div class="card-body admin-operations-body" id="adminOperationsBody">
            <div class="d-flex gap-2 mb-3">
                <button type="button" class="btn btn-danger" id="bulkDeleteBtn" onclick="submitBulkDelete()" style="display: none;">
                    <i class="bi bi-trash"></i> Delete Selected
                </button>
                
                <a asp-action="ReviewErrors" class="btn btn-info">
                    <i class="bi bi-pencil-square"></i> Review & Edit Errors
                </a>
                
                <a asp-action="ClearImportErrors" class="btn btn-secondary" onclick="return confirm('Are you sure you want to clear all import errors?')">
                    <i class="bi bi-x-circle"></i> Clear Errors
                </a>
                
                <button type="button" class="btn btn-danger" onclick="confirmDeleteAll()" title="Delete All Assets">
                    <i class="bi bi-trash"></i> Delete All
                </button>
            </div>
            
            <div class="d-flex gap-2">
                    <a asp-action="Create" class="btn btn-primary">
                        <i class="bi bi-plus-circle"></i> Add Asset
                    </a>
                    <a asp-action="Import" class="btn btn-success">
                        <i class="bi bi-upload"></i> Import
                    </a>
                                    <a asp-action="TestImport" class="btn btn-warning">
                    <i class="bi bi-bug"></i> Test Import
                </a>
                <a asp-action="Search" class="btn btn-info">
                    <i class="bi bi-search"></i> Search API
                </a>
                </div>
            
            <form id="bulkDeleteForm" method="post" asp-action="BulkDelete" style="display: none;">
                <!-- Hidden form for submission -->
            </form>
        </div>
    </div>

<div class="card shadow">
    <div class="card-header py-3">
        <div class="row align-items-center">
            <div class="col-md-6">
                <div class="d-flex gap-2 align-items-center">
                    <form asp-action="Index" method="get" class="d-flex me-2">
                        <input type="text" name="searchTerm" class="form-control me-2" placeholder="Search assets..." value="@ViewData["CurrentFilter"]" />
                        <button type="submit" class="btn btn-outline-primary">
                            <i class="bi bi-search"></i>
                        </button>
                        <button type="button" class="btn btn-outline-secondary" onclick="clearSearch()" title="Clear Search">
                            <i class="bi bi-x-circle"></i>
                        </button>
                    </form>
                    
                    <!-- Shopping Cart Basket -->
                    <div class="selection-basket d-none" id="selectionBasket">
                        <div class="d-flex align-items-center gap-2">
                            <button type="button" class="btn btn-outline-primary position-relative" onclick="showCartPreview()" id="cartButton">
                                <i class="bi bi-cart3"></i> Cart
                                <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger" id="selectedCount">0</span>
                            </button>
                            <button type="button" class="btn btn-sm btn-outline-secondary" onclick="clearSelection()">
                                <i class="bi bi-x"></i> Clear
                            </button>
                        </div>
                    </div>
                    
                    <!-- Actions Button - Always Visible -->
                    <div class="btn-group">
                        <button type="button" class="btn btn-outline-primary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                            <i class="bi bi-gear"></i> Actions
                        </button>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item" href="#" onclick="exportCurrentView()">
                                <i class="bi bi-download"></i> Export Current View
                            </a></li>
                            <li><a class="dropdown-item" href="#" onclick="exportAllAssets()">
                                <i class="bi bi-file-earmark-excel"></i> Export All Assets
                            </a></li>
                            <li><hr class="dropdown-divider"></li>
                            <li><a class="dropdown-item" href="#" onclick="showBulkActions()" id="bulkActionsOption" style="display: none;">
                                <i class="bi bi-basket"></i> Bulk Actions (<span id="bulkActionsCount">0</span>)
                            </a></li>
                        </ul>
                    </div>

                </div>
            </div>
            <div class="col-md-6 text-end">
                <div class="d-flex align-items-center justify-content-end">
                    <label class="me-3 text-muted small">Show:</label>
                    <select class="form-select form-select-sm" style="width: 80px; min-width: 80px;" onchange="changePageSize(this.value)">
                        <option value="10" selected="@(Model.PageSize == 10)">10</option>
                        <option value="25" selected="@(Model.PageSize == 25)">25</option>
                        <option value="50" selected="@(Model.PageSize == 50)">50</option>
                        <option value="100" selected="@(Model.PageSize == 100)">100</option>
                    </select>
                    
                    <!-- Navigation arrows -->
                    <div class="table-navigation-inline ms-3">
                        <button type="button" class="nav-arrow-inline left" id="navLeftInline" style="display: none;" title="Scroll Left">
                            <i class="bi bi-chevron-left"></i>
                        </button>
                        <div class="scroll-progress-container" id="scrollProgressContainer" style="display: none;">
                            <div class="scroll-progress-bar" id="scrollProgressBar"></div>
                        </div>
                        <button type="button" class="nav-arrow-inline right" id="navRightInline" style="display: none;" title="Scroll Right">
                            <i class="bi bi-chevron-right"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="card-body">
        @if (Model != null && Model.Items.Any())
        {
            <div class="table-container">
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>
                                <input type="checkbox" id="selectAllCheckbox" onchange="toggleSelectAll()" />
                            </th>
                            <th class="column-assetTag">
                                <div class="d-flex justify-content-between align-items-center">
                                    <a asp-action="Index" asp-all-route-data="@GenerateSortRouteValues(ViewData["AssetTagSortParm"]?.ToString())" class="text-decoration-none sortable-header @(ViewData["FilterAssetTag"] != null ? "text-primary fw-bold" : "")">
                                        Asset Tag
                                        @if (ViewData["CurrentSort"]?.ToString() == "assetTag_desc")
                                        {
                                            <i class="bi bi-sort-down"></i>
                                        }
                                        else if (ViewData["CurrentSort"]?.ToString() == "")
                                        {
                                            <i class="bi bi-sort-up"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort"></i>
                                        }
                                    </a>
                                    <button type="button" class="btn btn-sm @(ViewData["FilterAssetTag"] != null ? "btn-primary" : "btn-outline-secondary") ms-1" onclick="showColumnFilter('assetTag')" title="@(ViewData["FilterAssetTag"] != null ? "| Filter Asset Tag" : "Filter Asset Tag")">
                                        @if (ViewData["FilterAssetTag"] != null)
                                        {
                                            <span class="badge bg-light text-dark me-1" style="font-size: 0.6em;">@ViewData["FilterAssetTag"].ToString().Split(',').Length</span>
                                        }
                                        <i class="bi bi-funnel"></i>
                                    </button>
                                </div>
                            </th>
                            <th class="column-serialNumber">
                                <div class="d-flex justify-content-between align-items-center">
                                    <a asp-action="Index" asp-all-route-data="@GenerateSortRouteValues(ViewData["SerialNumberSortParm"]?.ToString())" class="text-decoration-none sortable-header @(ViewData["FilterSerialNumber"] != null ? "text-primary fw-bold" : "")">
                                        Serial Number
                                        @if (ViewData["CurrentSort"]?.ToString() == "serialNumber_desc")
                                        {
                                            <i class="bi bi-sort-down"></i>
                                        }
                                        else if (ViewData["CurrentSort"]?.ToString() == "serialNumber")
                                        {
                                            <i class="bi bi-sort-up"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort"></i>
                                        }
                                    </a>
                                    <button type="button" class="btn btn-sm @(ViewData["FilterSerialNumber"] != null ? "btn-primary" : "btn-outline-secondary") ms-1" onclick="showColumnFilter('serialNumber')" title="@(ViewData["FilterSerialNumber"] != null ? "| Filter Serial Number" : "Filter Serial Number")">
                                        @if (ViewData["FilterSerialNumber"] != null)
                                        {
                                            <span class="badge bg-light text-dark me-1" style="font-size: 0.6em;">@ViewData["FilterSerialNumber"].ToString().Split(',').Length</span>
                                        }
                                        <i class="bi bi-funnel"></i>
                                    </button>
                                </div>
                            </th>
                            <th class="column-serviceTag">
                                <div class="d-flex justify-content-between align-items-center">
                                    <a asp-action="Index" asp-all-route-data="@GenerateSortRouteValues(ViewData["ServiceTagSortParm"]?.ToString())" class="text-decoration-none sortable-header @(ViewData["FilterServiceTag"] != null ? "text-primary fw-bold" : "")">
                                        Service Tag
                                        @if (ViewData["CurrentSort"]?.ToString() == "serviceTag_desc")
                                        {
                                            <i class="bi bi-sort-down"></i>
                                        }
                                        else if (ViewData["CurrentSort"]?.ToString() == "serviceTag")
                                        {
                                            <i class="bi bi-sort-up"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort"></i>
                                        }
                                    </a>
                                    <button type="button" class="btn btn-sm @(ViewData["FilterServiceTag"] != null ? "btn-primary" : "btn-outline-secondary") ms-1" onclick="showColumnFilter('serviceTag')" title="@(ViewData["FilterServiceTag"] != null ? "| Filter Service Tag" : "Filter Service Tag")">
                                        @if (ViewData["FilterServiceTag"] != null)
                                        {
                                            <span class="badge bg-light text-dark me-1" style="font-size: 0.6em;">@ViewData["FilterServiceTag"].ToString().Split(',').Length</span>
                                        }
                                        <i class="bi bi-funnel"></i>
                                    </button>
                                </div>
                            </th>
                            <th class="column-manufacturer">
                                <div class="d-flex justify-content-between align-items-center">
                                    <a asp-action="Index" asp-all-route-data="@GenerateSortRouteValues(ViewData["ManufacturerSortParm"]?.ToString())" class="text-decoration-none sortable-header @(ViewData["FilterManufacturer"] != null ? "text-primary fw-bold" : "")">
                                        Manufacturer
                                        @if (ViewData["CurrentSort"]?.ToString() == "manufacturer_desc")
                                        {
                                            <i class="bi bi-sort-down"></i>
                                        }
                                        else if (ViewData["CurrentSort"]?.ToString() == "manufacturer")
                                        {
                                            <i class="bi bi-sort-up"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort"></i>
                                        }
                                    </a>
                                    <button type="button" class="btn btn-sm @(ViewData["FilterManufacturer"] != null ? "btn-primary" : "btn-outline-secondary") ms-1" onclick="showColumnFilter('manufacturer')" title="@(ViewData["FilterManufacturer"] != null ? "| Filter Manufacturer" : "Filter Manufacturer")">
                                        @if (ViewData["FilterManufacturer"] != null)
                                        {
                                            <span class="badge bg-light text-dark me-1" style="font-size: 0.6em;">@ViewData["FilterManufacturer"].ToString().Split(',').Length</span>
                                        }
                                        <i class="bi bi-funnel"></i>
                                    </button>
                                </div>
                            </th>
                            <th class="column-model">
                                <div class="d-flex justify-content-between align-items-center">
                                    <a asp-action="Index" asp-all-route-data="@GenerateSortRouteValues(ViewData["ModelSortParm"]?.ToString())" class="text-decoration-none sortable-header @(ViewData["FilterModel"] != null ? "text-primary fw-bold" : "")">
                                        Model
                                        @if (ViewData["CurrentSort"]?.ToString() == "model_desc")
                                        {
                                            <i class="bi bi-sort-down"></i>
                                        }
                                        else if (ViewData["CurrentSort"]?.ToString() == "model")
                                        {
                                            <i class="bi bi-sort-up"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort"></i>
                                        }
                                    </a>
                                    <button type="button" class="btn btn-sm @(ViewData["FilterModel"] != null ? "btn-primary" : "btn-outline-secondary") ms-1" onclick="showColumnFilter('model')" title="@(ViewData["FilterModel"] != null ? "| Filter Model" : "Filter Model")">
                                        @if (ViewData["FilterModel"] != null)
                                        {
                                            <span class="badge bg-light text-dark me-1" style="font-size: 0.6em;">@ViewData["FilterModel"].ToString().Split(',').Length</span>
                                        }
                                        <i class="bi bi-funnel"></i>
                                    </button>
                                </div>
                            </th>
                            <th class="column-category">
                                <div class="d-flex justify-content-between align-items-center">
                                    <a asp-action="Index" asp-all-route-data="@GenerateSortRouteValues(ViewData["CategorySortParm"]?.ToString())" class="text-decoration-none sortable-header @(ViewData["FilterCategory"] != null ? "text-primary fw-bold" : "")">
                                        Category
                                        @if (ViewData["CurrentSort"]?.ToString() == "category_desc")
                                        {
                                            <i class="bi bi-sort-down"></i>
                                        }
                                        else if (ViewData["CurrentSort"]?.ToString() == "category")
                                        {
                                            <i class="bi bi-sort-up"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort"></i>
                                        }
                                    </a>
                                    <button type="button" class="btn btn-sm @(ViewData["FilterCategory"] != null ? "btn-primary" : "btn-outline-secondary") ms-1" onclick="showColumnFilter('category')" title="@(ViewData["FilterCategory"] != null ? "| Filter Category" : "Filter Category")">
                                        @if (ViewData["FilterCategory"] != null)
                                        {
                                            <span class="badge bg-light text-dark me-1" style="font-size: 0.6em;">@ViewData["FilterCategory"].ToString().Split(',').Length</span>
                                        }
                                        <i class="bi bi-funnel"></i>
                                    </button>
                                </div>
                            </th>
                            <th class="column-netName">
                                <div class="d-flex justify-content-between align-items-center">
                                    <a asp-action="Index" asp-all-route-data="@GenerateSortRouteValues(ViewData["NetNameSortParm"]?.ToString())" class="text-decoration-none sortable-header @(ViewData["FilterNetName"] != null ? "text-primary fw-bold" : "")">
                                        Net Name
                                        @if (ViewData["CurrentSort"]?.ToString() == "netName_desc")
                                        {
                                            <i class="bi bi-sort-down"></i>
                                        }
                                        else if (ViewData["CurrentSort"]?.ToString() == "netName")
                                        {
                                            <i class="bi bi-sort-up"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort"></i>
                                        }
                                    </a>
                                    <button type="button" class="btn btn-sm @(ViewData["FilterNetName"] != null ? "btn-primary" : "btn-outline-secondary") ms-1" onclick="showColumnFilter('netName')" title="@(ViewData["FilterNetName"] != null ? "| Filter Net Name" : "Filter Net Name")">
                                        @if (ViewData["FilterNetName"] != null)
                                        {
                                            <span class="badge bg-light text-dark me-1" style="font-size: 0.6em;">@ViewData["FilterNetName"].ToString().Split(',').Length</span>
                                        }
                                        <i class="bi bi-funnel"></i>
                                    </button>
                                </div>
                            </th>
                            <th class="column-assignedUser">
                                <div class="d-flex justify-content-between align-items-center">
                                    <a asp-action="Index" asp-all-route-data="@GenerateSortRouteValues(ViewData["AssignedUserSortParm"]?.ToString())" class="text-decoration-none sortable-header @(ViewData["FilterAssignedUser"] != null ? "text-primary fw-bold" : "")">
                                        Assigned User
                                        @if (ViewData["CurrentSort"]?.ToString() == "assignedUser_desc")
                                        {
                                            <i class="bi bi-sort-down"></i>
                                        }
                                        else if (ViewData["CurrentSort"]?.ToString() == "assignedUser")
                                        {
                                            <i class="bi bi-sort-up"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort"></i>
                                        }
                                    </a>
                                    <button type="button" class="btn btn-sm @(ViewData["FilterAssignedUser"] != null ? "btn-primary" : "btn-outline-secondary") ms-1" onclick="showColumnFilter('assignedUser')" title="@(ViewData["FilterAssignedUser"] != null ? "| Filter Assigned User" : "Filter Assigned User")">
                                        @if (ViewData["FilterAssignedUser"] != null)
                                        {
                                            <span class="badge bg-light text-dark me-1" style="font-size: 0.6em;">@ViewData["FilterAssignedUser"].ToString().Split(',').Length</span>
                                        }
                                        <i class="bi bi-funnel"></i>
                                    </button>
                                </div>
                            </th>
                            <th class="column-assignedUserEmail">
                                                                    <a asp-action="Index" asp-all-route-data="@GenerateSortRouteValues(ViewData["AssignedUserEmailSortParm"]?.ToString())" class="text-decoration-none sortable-header">
                                    Assigned User Email
                                    @if (ViewData["CurrentSort"]?.ToString() == "assignedUserEmail_desc")
                                    {
                                        <i class="bi bi-sort-down"></i>
                                    }
                                    else if (ViewData["CurrentSort"]?.ToString() == "assignedUserEmail")
                                    {
                                        <i class="bi bi-sort-up"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-sort"></i>
                                    }
                                </a>
                            </th>
                            <th class="column-manager">
                                <div class="d-flex justify-content-between align-items-center">
                                    <a asp-action="Index" asp-all-route-data="@GenerateSortRouteValues(ViewData["ManagerSortParm"]?.ToString())" class="text-decoration-none sortable-header @(ViewData["FilterManager"] != null ? "text-primary fw-bold" : "")">
                                        Manager
                                        @if (ViewData["CurrentSort"]?.ToString() == "manager_desc")
                                        {
                                            <i class="bi bi-sort-down"></i>
                                        }
                                        else if (ViewData["CurrentSort"]?.ToString() == "manager")
                                        {
                                            <i class="bi bi-sort-up"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort"></i>
                                        }
                                    </a>
                                    <button type="button" class="btn btn-sm @(ViewData["FilterManager"] != null ? "btn-primary" : "btn-outline-secondary") ms-1" onclick="showColumnFilter('manager')" title="@(ViewData["FilterManager"] != null ? "| Filter Manager" : "Filter Manager")">
                                        @if (ViewData["FilterManager"] != null)
                                        {
                                            <span class="badge bg-light text-dark me-1" style="font-size: 0.6em;">@ViewData["FilterManager"].ToString().Split(',').Length</span>
                                        }
                                        <i class="bi bi-funnel"></i>
                                    </button>
                                </div>
                            </th>
                            <th class="column-department">
                                <div class="d-flex justify-content-between align-items-center">
                                    <a asp-action="Index" asp-all-route-data="@GenerateSortRouteValues(ViewData["DepartmentSortParm"]?.ToString())" class="text-decoration-none sortable-header @(ViewData["FilterDepartment"] != null ? "text-primary fw-bold" : "")">
                                        Department
                                        @if (ViewData["CurrentSort"]?.ToString() == "department_desc")
                                        {
                                            <i class="bi bi-sort-down"></i>
                                        }
                                        else if (ViewData["CurrentSort"]?.ToString() == "department")
                                        {
                                            <i class="bi bi-sort-up"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort"></i>
                                        }
                                    </a>
                                    <button type="button" class="btn btn-sm @(ViewData["FilterDepartment"] != null ? "btn-primary" : "btn-outline-secondary") ms-1" onclick="showColumnFilter('department')" title="@(ViewData["FilterDepartment"] != null ? "| Filter Department" : "Filter Department")">
                                        @if (ViewData["FilterDepartment"] != null)
                                        {
                                            <span class="badge bg-light text-dark me-1" style="font-size: 0.6em;">@ViewData["FilterDepartment"].ToString().Split(',').Length</span>
                                        }
                                        <i class="bi bi-funnel"></i>
                                    </button>
                                </div>
                            </th>
                            <th class="column-unit">
                                <a asp-action="Index" asp-route-sortOrder="@ViewData["UnitSortParm"]" asp-route-searchTerm="@ViewData["CurrentFilter"]" asp-route-pageSize="@Model.PageSize" class="text-decoration-none sortable-header">
                                    Unit
                                    @if (ViewData["CurrentSort"]?.ToString() == "unit_desc")
                                    {
                                        <i class="bi bi-sort-down"></i>
                                    }
                                    else if (ViewData["CurrentSort"]?.ToString() == "unit")
                                    {
                                        <i class="bi bi-sort-up"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-sort"></i>
                                    }
                                </a>
                            </th>
                            <th class="column-location">
                                <div class="d-flex justify-content-between align-items-center">
                                    <a asp-action="Index" asp-all-route-data="@GenerateSortRouteValues(ViewData["LocationSortParm"]?.ToString())" class="text-decoration-none sortable-header @(ViewData["FilterLocation"] != null ? "text-primary fw-bold" : "")">
                                        Location
                                        @if (ViewData["CurrentSort"]?.ToString() == "location_desc")
                                        {
                                            <i class="bi bi-sort-down"></i>
                                        }
                                        else if (ViewData["CurrentSort"]?.ToString() == "location")
                                        {
                                            <i class="bi bi-sort-up"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort"></i>
                                        }
                                    </a>
                                    <button type="button" class="btn btn-sm @(ViewData["FilterLocation"] != null ? "btn-primary" : "btn-outline-secondary") ms-1" onclick="showColumnFilter('location')" title="@(ViewData["FilterLocation"] != null ? "| Filter Location" : "Filter Location")">
                                        @if (ViewData["FilterLocation"] != null)
                                        {
                                            <span class="badge bg-light text-dark me-1" style="font-size: 0.6em;">@ViewData["FilterLocation"].ToString().Split(',').Length</span>
                                        }
                                        <i class="bi bi-funnel"></i>
                                    </button>
                                </div>
                            </th>
                            <th class="column-floor">
                                <div class="d-flex justify-content-between align-items-center">
                                    <a asp-action="Index" asp-route-sortOrder="@ViewData["FloorSortParm"]" asp-route-searchTerm="@ViewData["CurrentFilter"]" asp-route-pageSize="@Model.PageSize" class="text-decoration-none sortable-header @(ViewData["FilterFloor"] != null ? "text-primary fw-bold" : "")">
                                        Floor
                                        @if (ViewData["CurrentSort"]?.ToString() == "floor_desc")
                                        {
                                            <i class="bi bi-sort-down"></i>
                                        }
                                        else if (ViewData["CurrentSort"]?.ToString() == "floor")
                                        {
                                            <i class="bi bi-sort-up"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort"></i>
                                        }
                                    </a>
                                    <button type="button" class="btn btn-sm @(ViewData["FilterFloor"] != null ? "btn-primary" : "btn-outline-secondary") ms-1" onclick="showColumnFilter('floor')" title="@(ViewData["FilterFloor"] != null ? "| Filter Floor" : "Filter Floor")">
                                        @if (ViewData["FilterFloor"] != null)
                                        {
                                            <span class="badge bg-light text-dark me-1" style="font-size: 0.6em;">@ViewData["FilterFloor"].ToString().Split(',').Length</span>
                                        }
                                        <i class="bi bi-funnel"></i>
                                    </button>
                                </div>
                            </th>
                            <th class="column-desk">
                                <div class="d-flex justify-content-between align-items-center">
                                    <a asp-action="Index" asp-route-sortOrder="@ViewData["DeskSortParm"]" asp-route-searchTerm="@ViewData["CurrentFilter"]" asp-route-pageSize="@Model.PageSize" class="text-decoration-none sortable-header @(ViewData["FilterDesk"] != null ? "text-primary fw-bold" : "")">
                                        Desk
                                        @if (ViewData["CurrentSort"]?.ToString() == "desk_desc")
                                        {
                                            <i class="bi bi-sort-down"></i>
                                        }
                                        else if (ViewData["CurrentSort"]?.ToString() == "desk")
                                        {
                                            <i class="bi bi-sort-up"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort"></i>
                                        }
                                    </a>
                                    <button type="button" class="btn btn-sm @(ViewData["FilterDesk"] != null ? "btn-primary" : "btn-outline-secondary") ms-1" onclick="showColumnFilter('desk')" title="@(ViewData["FilterDesk"] != null ? "| Filter Desk" : "Filter Desk")">
                                        @if (ViewData["FilterDesk"] != null)
                                        {
                                            <span class="badge bg-light text-dark me-1" style="font-size: 0.6em;">@ViewData["FilterDesk"].ToString().Split(',').Length</span>
                                        }
                                        <i class="bi bi-funnel"></i>
                                    </button>
                                </div>
                            </th>
                            <th class="column-status">
                                <div class="d-flex justify-content-between align-items-center">
                                    <a asp-action="Index" asp-all-route-data="@GenerateSortRouteValues(ViewData["StatusSortParm"]?.ToString())" class="text-decoration-none sortable-header @(ViewData["FilterStatus"] != null ? "text-primary fw-bold" : "")">
                                        Status
                                        @if (ViewData["CurrentSort"]?.ToString() == "status_desc")
                                        {
                                            <i class="bi bi-sort-down"></i>
                                        }
                                        else if (ViewData["CurrentSort"]?.ToString() == "status")
                                        {
                                            <i class="bi bi-sort-up"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-sort"></i>
                                        }
                                    </a>
                                    <button type="button" class="btn btn-sm @(ViewData["FilterStatus"] != null ? "btn-primary" : "btn-outline-secondary") ms-1" onclick="showColumnFilter('status')" title="@(ViewData["FilterStatus"] != null ? "| Filter Status" : "Filter Status")">
                                        @if (ViewData["FilterStatus"] != null)
                                        {
                                            <span class="badge bg-light text-dark me-1" style="font-size: 0.6em;">@ViewData["FilterStatus"].ToString().Split(',').Length</span>
                                        }
                                        <i class="bi bi-funnel"></i>
                                    </button>
                                </div>
                            </th>
                            <th class="column-lifecycle">
                                <a asp-action="Index" asp-route-sortOrder="@ViewData["LifecycleSortParm"]" asp-route-searchTerm="@ViewData["CurrentFilter"]" asp-route-pageSize="@Model.PageSize" class="text-decoration-none sortable-header">
                                    Lifecycle
                                    @if (ViewData["CurrentSort"]?.ToString() == "lifecycle_desc")
                                    {
                                        <i class="bi bi-sort-down"></i>
                                    }
                                    else if (ViewData["CurrentSort"]?.ToString() == "lifecycle")
                                    {
                                        <i class="bi bi-sort-up"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-sort"></i>
                                    }
                                </a>
                            </th>
                            <th class="column-ipAddress">
                                <a asp-action="Index" asp-route-sortOrder="@ViewData["IpAddressSortParm"]" asp-route-searchTerm="@ViewData["CurrentFilter"]" asp-route-pageSize="@Model.PageSize" class="text-decoration-none sortable-header">
                                    IP Address
                                    @if (ViewData["CurrentSort"]?.ToString() == "ipAddress_desc")
                                    {
                                        <i class="bi bi-sort-down"></i>
                                    }
                                    else if (ViewData["CurrentSort"]?.ToString() == "ipAddress")
                                    {
                                        <i class="bi bi-sort-up"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-sort"></i>
                                    }
                                </a>
                            </th>
                            <th class="column-macAddress">
                                <a asp-action="Index" asp-route-sortOrder="@ViewData["MacAddressSortParm"]" asp-route-searchTerm="@ViewData["CurrentFilter"]" asp-route-pageSize="@Model.PageSize" class="text-decoration-none sortable-header">
                                    MAC Address
                                    @if (ViewData["CurrentSort"]?.ToString() == "macAddress_desc")
                                    {
                                        <i class="bi bi-sort-down"></i>
                                    }
                                    else if (ViewData["CurrentSort"]?.ToString() == "macAddress")
                                    {
                                        <i class="bi bi-sort-up"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-sort"></i>
                                    }
                                </a>
                            </th>
                            <th class="column-wallPort">
                                <a asp-action="Index" asp-route-sortOrder="@ViewData["WallPortSortParm"]" asp-route-searchTerm="@ViewData["CurrentFilter"]" asp-route-pageSize="@Model.PageSize" class="text-decoration-none sortable-header">
                                    Wall Port
                                    @if (ViewData["CurrentSort"]?.ToString() == "wallPort_desc")
                                    {
                                        <i class="bi bi-sort-down"></i>
                                    }
                                    else if (ViewData["CurrentSort"]?.ToString() == "wallPort")
                                    {
                                        <i class="bi bi-sort-up"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-sort"></i>
                                    }
                                </a>
                            </th>
                            <th class="column-switchName">
                                <a asp-action="Index" asp-route-sortOrder="@ViewData["SwitchNameSortParm"]" asp-route-searchTerm="@ViewData["CurrentFilter"]" asp-route-pageSize="@Model.PageSize" class="text-decoration-none sortable-header">
                                    Switch Name
                                    @if (ViewData["CurrentSort"]?.ToString() == "switchName_desc")
                                    {
                                        <i class="bi bi-sort-down"></i>
                                    }
                                    else if (ViewData["CurrentSort"]?.ToString() == "switchName")
                                    {
                                        <i class="bi bi-sort-up"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-sort"></i>
                                    }
                                </a>
                            </th>
                            <th class="column-switchPort">
                                <a asp-action="Index" asp-route-sortOrder="@ViewData["SwitchPortSortParm"]" asp-route-searchTerm="@ViewData["CurrentFilter"]" asp-route-pageSize="@Model.PageSize" class="text-decoration-none sortable-header">
                                    Switch Port
                                    @if (ViewData["CurrentSort"]?.ToString() == "switchPort_desc")
                                    {
                                        <i class="bi bi-sort-down"></i>
                                    }
                                    else if (ViewData["CurrentSort"]?.ToString() == "switchPort")
                                    {
                                        <i class="bi bi-sort-up"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-sort"></i>
                                    }
                                </a>
                            </th>
                            <th class="column-phoneNumber">
                                <a asp-action="Index" asp-route-sortOrder="@ViewData["PhoneNumberSortParm"]" asp-route-searchTerm="@ViewData["CurrentFilter"]" asp-route-pageSize="@Model.PageSize" class="text-decoration-none sortable-header">
                                    Phone Number
                                    @if (ViewData["CurrentSort"]?.ToString() == "phoneNumber_desc")
                                    {
                                        <i class="bi bi-sort-down"></i>
                                    }
                                    else if (ViewData["CurrentSort"]?.ToString() == "phoneNumber")
                                    {
                                        <i class="bi bi-sort-up"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-sort"></i>
                                    }
                                </a>
                            </th>
                            <th class="column-extension">
                                <a asp-action="Index" asp-route-sortOrder="@ViewData["ExtensionSortParm"]" asp-route-searchTerm="@ViewData["CurrentFilter"]" asp-route-pageSize="@Model.PageSize" class="text-decoration-none sortable-header">
                                    Extension
                                    @if (ViewData["CurrentSort"]?.ToString() == "extension_desc")
                                    {
                                        <i class="bi bi-sort-down"></i>
                                    }
                                    else if (ViewData["CurrentSort"]?.ToString() == "extension")
                                    {
                                        <i class="bi bi-sort-up"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-sort"></i>
                                    }
                                </a>
                            </th>
                            <th class="column-imei">
                                <a asp-action="Index" asp-route-sortOrder="@ViewData["ImeiSortParm"]" asp-route-searchTerm="@ViewData["CurrentFilter"]" asp-route-pageSize="@Model.PageSize" class="text-decoration-none sortable-header">
                                    IMEI
                                    @if (ViewData["CurrentSort"]?.ToString() == "imei_desc")
                                    {
                                        <i class="bi bi-sort-down"></i>
                                    }
                                    else if (ViewData["CurrentSort"]?.ToString() == "imei")
                                    {
                                        <i class="bi bi-sort-up"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-sort"></i>
                                    }
                                </a>
                            </th>
                            <th class="column-cardNumber">
                                <a asp-action="Index" asp-route-sortOrder="@ViewData["CardNumberSortParm"]" asp-route-searchTerm="@ViewData["CurrentFilter"]" asp-route-pageSize="@Model.PageSize" class="text-decoration-none sortable-header">
                                    Card Number
                                    @if (ViewData["CurrentSort"]?.ToString() == "cardNumber_desc")
                                    {
                                        <i class="bi bi-sort-down"></i>
                                    }
                                    else if (ViewData["CurrentSort"]?.ToString() == "cardNumber")
                                    {
                                        <i class="bi bi-sort-up"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-sort"></i>
                                    }
                                </a>
                            </th>
                            <th class="column-osVersion">
                                <a asp-action="Index" asp-route-sortOrder="@ViewData["OsVersionSortParm"]" asp-route-searchTerm="@ViewData["CurrentFilter"]" asp-route-pageSize="@Model.PageSize" class="text-decoration-none sortable-header">
                                    OS Version
                                    @if (ViewData["CurrentSort"]?.ToString() == "osVersion_desc")
                                    {
                                        <i class="bi bi-sort-down"></i>
                                    }
                                    else if (ViewData["CurrentSort"]?.ToString() == "osVersion")
                                    {
                                        <i class="bi bi-sort-up"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-sort"></i>
                                    }
                                </a>
                            </th>
                            <th class="column-license1">
                                <a asp-action="Index" asp-route-sortOrder="@ViewData["License1SortParm"]" asp-route-searchTerm="@ViewData["CurrentFilter"]" asp-route-pageSize="@Model.PageSize" class="text-decoration-none sortable-header">
                                    License1
                                    @if (ViewData["CurrentSort"]?.ToString() == "license1_desc")
                                    {
                                        <i class="bi bi-sort-down"></i>
                                    }
                                    else if (ViewData["CurrentSort"]?.ToString() == "license1")
                                    {
                                        <i class="bi bi-sort-up"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-sort"></i>
                                    }
                                </a>
                            </th>
                            <th class="column-license2">
                                <a asp-action="Index" asp-route-sortOrder="@ViewData["License2SortParm"]" asp-route-searchTerm="@ViewData["CurrentFilter"]" asp-route-pageSize="@Model.PageSize" class="text-decoration-none sortable-header">
                                    License2
                                    @if (ViewData["CurrentSort"]?.ToString() == "license2_desc")
                                    {
                                        <i class="bi bi-sort-down"></i>
                                    }
                                    else if (ViewData["CurrentSort"]?.ToString() == "license2")
                                    {
                                        <i class="bi bi-sort-up"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-sort"></i>
                                    }
                                </a>
                            </th>
                            <th class="column-license3">
                                <a asp-action="Index" asp-route-sortOrder="@ViewData["License3SortParm"]" asp-route-searchTerm="@ViewData["CurrentFilter"]" asp-route-pageSize="@Model.PageSize" class="text-decoration-none sortable-header">
                                    License3
                                    @if (ViewData["CurrentSort"]?.ToString() == "license3_desc")
                                    {
                                        <i class="bi bi-sort-down"></i>
                                    }
                                    else if (ViewData["CurrentSort"]?.ToString() == "license3")
                                    {
                                        <i class="bi bi-sort-up"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-sort"></i>
                                    }
                                </a>
                            </th>
                            <th class="column-license4">
                                <a asp-action="Index" asp-route-sortOrder="@ViewData["License4SortParm"]" asp-route-searchTerm="@ViewData["CurrentFilter"]" asp-route-pageSize="@Model.PageSize" class="text-decoration-none sortable-header">
                                    License4
                                    @if (ViewData["CurrentSort"]?.ToString() == "license4_desc")
                                    {
                                        <i class="bi bi-sort-down"></i>
                                    }
                                    else if (ViewData["CurrentSort"]?.ToString() == "license4")
                                    {
                                        <i class="bi bi-sort-up"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-sort"></i>
                                    }
                                </a>
                            </th>
                            <th class="column-license5">
                                <a asp-action="Index" asp-route-sortOrder="@ViewData["License5SortParm"]" asp-route-searchTerm="@ViewData["CurrentFilter"]" asp-route-pageSize="@Model.PageSize" class="text-decoration-none sortable-header">
                                    License5
                                    @if (ViewData["CurrentSort"]?.ToString() == "license5_desc")
                                    {
                                        <i class="bi bi-sort-down"></i>
                                    }
                                    else if (ViewData["CurrentSort"]?.ToString() == "license5")
                                    {
                                        <i class="bi bi-sort-up"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-sort"></i>
                                    }
                                </a>
                            </th>
                            <th class="column-purchaseOrderNumber">
                                <a asp-action="Index" asp-route-sortOrder="@ViewData["PurchaseOrderNumberSortParm"]" asp-route-searchTerm="@ViewData["CurrentFilter"]" asp-route-pageSize="@Model.PageSize" class="text-decoration-none sortable-header">
                                    Purchase Order Number
                                    @if (ViewData["CurrentSort"]?.ToString() == "purchaseOrderNumber_desc")
                                    {
                                        <i class="bi bi-sort-down"></i>
                                    }
                                    else if (ViewData["CurrentSort"]?.ToString() == "purchaseOrderNumber")
                                    {
                                        <i class="bi bi-sort-up"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-sort"></i>
                                    }
                                </a>
                            </th>
                            <th class="column-vendor">
                                <a asp-action="Index" asp-route-sortOrder="@ViewData["VendorSortParm"]" asp-route-searchTerm="@ViewData["CurrentFilter"]" asp-route-pageSize="@Model.PageSize" class="text-decoration-none sortable-header">
                                    Vendor
                                    @if (ViewData["CurrentSort"]?.ToString() == "vendor_desc")
                                    {
                                        <i class="bi bi-sort-down"></i>
                                    }
                                    else if (ViewData["CurrentSort"]?.ToString() == "vendor")
                                    {
                                        <i class="bi bi-sort-up"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-sort"></i>
                                    }
                                </a>
                            </th>
                            <th class="column-vendorInvoice">
                                <a asp-action="Index" asp-route-sortOrder="@ViewData["VendorInvoiceSortParm"]" asp-route-searchTerm="@ViewData["CurrentFilter"]" asp-route-pageSize="@Model.PageSize" class="text-decoration-none sortable-header">
                                    Vendor Invoice
                                    @if (ViewData["CurrentSort"]?.ToString() == "vendorInvoice_desc")
                                    {
                                        <i class="bi bi-sort-down"></i>
                                    }
                                    else if (ViewData["CurrentSort"]?.ToString() == "vendorInvoice")
                                    {
                                        <i class="bi bi-sort-up"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-sort"></i>
                                    }
                                </a>
                            </th>
                            <th class="column-purchaseDate">
                                <a asp-action="Index" asp-route-sortOrder="@ViewData["PurchaseDateSortParm"]" asp-route-searchTerm="@ViewData["CurrentFilter"]" asp-route-pageSize="@Model.PageSize" class="text-decoration-none sortable-header">
                                    Purchase Date
                                    @if (ViewData["CurrentSort"]?.ToString() == "purchaseDate_desc")
                                    {
                                        <i class="bi bi-sort-down"></i>
                                    }
                                    else if (ViewData["CurrentSort"]?.ToString() == "purchaseDate")
                                    {
                                        <i class="bi bi-sort-up"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-sort"></i>
                                    }
                                </a>
                            </th>
                            <th class="column-warrantyStart">
                                <a asp-action="Index" asp-route-sortOrder="@ViewData["WarrantyStartSortParm"]" asp-route-searchTerm="@ViewData["CurrentFilter"]" asp-route-pageSize="@Model.PageSize" class="text-decoration-none sortable-header">
                                    Warranty Start
                                    @if (ViewData["CurrentSort"]?.ToString() == "warrantyStart_desc")
                                    {
                                        <i class="bi bi-sort-down"></i>
                                    }
                                    else if (ViewData["CurrentSort"]?.ToString() == "warrantyStart")
                                    {
                                        <i class="bi bi-sort-up"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-sort"></i>
                                    }
                                </a>
                            </th>
                            <th class="column-warrantyEnd">
                                <a asp-action="Index" asp-route-sortOrder="@ViewData["WarrantyEndSortParm"]" asp-route-searchTerm="@ViewData["CurrentFilter"]" asp-route-pageSize="@Model.PageSize" class="text-decoration-none sortable-header">
                                    Warranty End
                                    @if (ViewData["CurrentSort"]?.ToString() == "warrantyEnd_desc")
                                    {
                                        <i class="bi bi-sort-down"></i>
                                    }
                                    else if (ViewData["CurrentSort"]?.ToString() == "warrantyEnd")
                                    {
                                        <i class="bi bi-sort-up"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-sort"></i>
                                    }
                                </a>
                            </th>
                            <th class="column-notes">
                                <a asp-action="Index" asp-route-sortOrder="@ViewData["NotesSortParm"]" asp-route-searchTerm="@ViewData["CurrentFilter"]" asp-route-pageSize="@Model.PageSize" class="text-decoration-none sortable-header">
                                    Notes
                                    @if (ViewData["CurrentSort"]?.ToString() == "notes_desc")
                                    {
                                        <i class="bi bi-sort-down"></i>
                                    }
                                    else if (ViewData["CurrentSort"]?.ToString() == "notes")
                                    {
                                        <i class="bi bi-sort-up"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-sort"></i>
                                    }
                                </a>
                            </th>
                            <th class="column-createdAt">
                                <a asp-action="Index" asp-route-sortOrder="@ViewData["CreatedAtSortParm"]" asp-route-searchTerm="@ViewData["CurrentFilter"]" asp-route-pageSize="@Model.PageSize" class="text-decoration-none sortable-header">
                                    Created At
                                    @if (ViewData["CurrentSort"]?.ToString() == "createdAt_desc")
                                    {
                                        <i class="bi bi-sort-down"></i>
                                    }
                                    else if (ViewData["CurrentSort"]?.ToString() == "createdAt")
                                    {
                                        <i class="bi bi-sort-up"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-sort"></i>
                                    }
                                </a>
                            </th>
                            <th class="column-createdBy">
                                <a asp-action="Index" asp-route-sortOrder="@ViewData["CreatedBySortParm"]" asp-route-searchTerm="@ViewData["CurrentFilter"]" asp-route-pageSize="@Model.PageSize" class="text-decoration-none sortable-header">
                                    Created By
                                    @if (ViewData["CurrentSort"]?.ToString() == "createdBy_desc")
                                    {
                                        <i class="bi bi-sort-down"></i>
                                    }
                                    else if (ViewData["CurrentSort"]?.ToString() == "createdBy")
                                    {
                                        <i class="bi bi-sort-up"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-sort"></i>
                                    }
                                </a>
                            </th>
                            <th class="column-actions">
                                <div class="d-flex align-items-center justify-content-center gap-2">
                                    <span>Actions</span>
                                    <button type="button" class="btn btn-sm btn-outline-secondary" data-bs-toggle="modal" data-bs-target="#columnSettingsModal" title="Column Settings">
                                        <i class="bi bi-gear"></i>
                                    </button>
                                </div>
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var asset in Model.Items)
                        {
                            <tr data-asset-id="@asset.Id">
                                <td>
                                    <input type="checkbox" name="selectedIds" class="asset-checkbox" value="@asset.Id" data-asset-tag="@asset.AssetTag" onchange="updateBulkDeleteButton(); toggleAssetSelection('@asset.AssetTag')" />
                                </td>
                                                                 <td class="column-assetTag editable-cell" data-field="AssetTag" data-id="@asset.Id" title="@asset.AssetTag"><strong>@asset.AssetTag</strong></td>
                                 <td class="column-serialNumber editable-cell" data-field="SerialNumber" data-id="@asset.Id" title="@asset.SerialNumber">@asset.SerialNumber</td>
                                 <td class="column-serviceTag editable-cell" data-field="ServiceTag" data-id="@asset.Id" title="@asset.ServiceTag">@asset.ServiceTag</td>
                                 <td class="column-manufacturer editable-cell" data-field="Manufacturer" data-id="@asset.Id" title="@asset.Manufacturer">@asset.Manufacturer</td>
                                 <td class="column-model editable-cell" data-field="Model" data-id="@asset.Id" title="@asset.Model">@asset.Model</td>
                                 <td class="column-category editable-cell" data-field="Category" data-id="@asset.Id" title="@asset.Category">
                                     <span class="badge bg-secondary">@asset.Category</span>
                                 </td>
                                 <td class="column-netName editable-cell" data-field="NetName" data-id="@asset.Id" title="@asset.NetName">@asset.NetName</td>
                                 <td class="column-assignedUser editable-cell" data-field="AssignedUserName" data-id="@asset.Id" title="@asset.AssignedUserName">@asset.AssignedUserName</td>
                                 <td class="column-assignedUserEmail editable-cell" data-field="AssignedUserEmail" data-id="@asset.Id" title="@asset.AssignedUserEmail">@asset.AssignedUserEmail</td>
                                 <td class="column-manager editable-cell" data-field="Manager" data-id="@asset.Id" title="@asset.Manager">@asset.Manager</td>
                                 <td class="column-department editable-cell" data-field="Department" data-id="@asset.Id" title="@asset.Department">@asset.Department</td>
                                 <td class="column-unit editable-cell" data-field="Unit" data-id="@asset.Id" title="@asset.Unit">@asset.Unit</td>
                                 <td class="column-location editable-cell" data-field="Location" data-id="@asset.Id" title="@asset.Location">@asset.Location</td>
                                 <td class="column-floor editable-cell" data-field="Floor" data-id="@asset.Id" title="@asset.Floor">@asset.Floor</td>
                                 <td class="column-desk editable-cell" data-field="Desk" data-id="@asset.Id" title="@asset.Desk">@asset.Desk</td>
                                 <td class="column-status editable-cell" data-field="Status" data-id="@asset.Id" title="@asset.Status">
                                     @{
                                         var statusClass = asset.Status?.ToLower() switch
                                         {
                                             "active" => "bg-success",
                                             "inactive" => "bg-secondary",
                                             "maintenance" => "bg-warning",
                                             "retired" => "bg-danger",
                                             _ => "bg-info"
                                         };
                                     }
                                     <span class="badge @statusClass">@asset.Status</span>
                                 </td>
                                 <td class="column-lifecycle" data-id="@asset.Id" title="@asset.LifecycleState">
                                     @{
                                         var lifecycleClass = asset.LifecycleState switch
                                         {
                                             AssetLifecycleState.InStorage => "bg-info",
                                             AssetLifecycleState.ReadyForShipment => "bg-warning",
                                             AssetLifecycleState.InTransit => "bg-warning",
                                             AssetLifecycleState.Delivered => "bg-primary",
                                             AssetLifecycleState.Deployed => "bg-success",
                                             AssetLifecycleState.RedeployPending => "bg-warning",
                                             AssetLifecycleState.SalvagePending => "bg-danger",
                                             AssetLifecycleState.Salvaged => "bg-secondary",
                                             _ => "bg-light"
                                         };
                                         var lifecycleText = asset.LifecycleState switch
                                         {
                                             AssetLifecycleState.InStorage => "Storage",
                                             AssetLifecycleState.ReadyForShipment => "Ready for Shipment",
                                             AssetLifecycleState.InTransit => "In Transit",
                                             AssetLifecycleState.Delivered => "Delivered",
                                             AssetLifecycleState.Deployed => "Deployed",
                                             AssetLifecycleState.RedeployPending => "Redeploy",
                                             AssetLifecycleState.SalvagePending => "Salvage",
                                             AssetLifecycleState.Salvaged => "Salvaged",
                                             _ => asset.LifecycleState.ToString()
                                         };
                                     }
                                     <span class="badge @lifecycleClass">@lifecycleText</span>
                                 </td>
                                 <td class="column-ipAddress editable-cell" data-field="IpAddress" data-id="@asset.Id" title="@asset.IpAddress">@asset.IpAddress</td>
                                 <td class="column-macAddress editable-cell" data-field="MacAddress" data-id="@asset.Id" title="@asset.MacAddress">@asset.MacAddress</td>
                                 <td class="column-wallPort editable-cell" data-field="WallPort" data-id="@asset.Id" title="@asset.WallPort">@asset.WallPort</td>
                                 <td class="column-switchName editable-cell" data-field="SwitchName" data-id="@asset.Id" title="@asset.SwitchName">@asset.SwitchName</td>
                                 <td class="column-switchPort editable-cell" data-field="SwitchPort" data-id="@asset.Id" title="@asset.SwitchPort">@asset.SwitchPort</td>
                                 <td class="column-phoneNumber editable-cell" data-field="PhoneNumber" data-id="@asset.Id" title="@asset.PhoneNumber">@asset.PhoneNumber</td>
                                 <td class="column-extension editable-cell" data-field="Extension" data-id="@asset.Id" title="@asset.Extension">@asset.Extension</td>
                                 <td class="column-imei editable-cell" data-field="Imei" data-id="@asset.Id" title="@asset.Imei">@asset.Imei</td>
                                 <td class="column-cardNumber editable-cell" data-field="CardNumber" data-id="@asset.Id" title="@asset.CardNumber">@asset.CardNumber</td>
                                 <td class="column-osVersion editable-cell" data-field="OsVersion" data-id="@asset.Id" title="@asset.OsVersion">@asset.OsVersion</td>
                                 <td class="column-license1 editable-cell" data-field="License1" data-id="@asset.Id" title="@asset.License1">@asset.License1</td>
                                 <td class="column-license2 editable-cell" data-field="License2" data-id="@asset.Id" title="@asset.License2">@asset.License2</td>
                                 <td class="column-license3 editable-cell" data-field="License3" data-id="@asset.Id" title="@asset.License3">@asset.License3</td>
                                 <td class="column-license4 editable-cell" data-field="License4" data-id="@asset.Id" title="@asset.License4">@asset.License4</td>
                                 <td class="column-license5 editable-cell" data-field="License5" data-id="@asset.Id" title="@asset.License5">@asset.License5</td>
                                 <td class="column-purchaseOrderNumber editable-cell" data-field="OrderNumber" data-id="@asset.Id" title="@asset.OrderNumber">@asset.OrderNumber</td>
                                 <td class="column-vendor editable-cell" data-field="Vendor" data-id="@asset.Id" title="@asset.Vendor">@asset.Vendor</td>
                                 <td class="column-vendorInvoice editable-cell" data-field="VendorInvoice" data-id="@asset.Id" title="@asset.VendorInvoice">@asset.VendorInvoice</td>
                                 <td class="column-purchaseDate" title="@(asset.PurchaseDate?.ToString("MM/dd/yyyy"))">@(asset.PurchaseDate?.ToString("MM/dd/yyyy"))</td>
                                 <td class="column-warrantyStart" title="@(asset.WarrantyStart?.ToString("MM/dd/yyyy"))">@(asset.WarrantyStart?.ToString("MM/dd/yyyy"))</td>
                                 <td class="column-warrantyEnd" title="@(asset.WarrantyEndDate?.ToString("MM/dd/yyyy"))">@(asset.WarrantyEndDate?.ToString("MM/dd/yyyy"))</td>
                                 <td class="column-notes editable-cell" data-field="Notes" data-id="@asset.Id" title="@asset.Notes">@asset.Notes</td>
                                 <td class="column-createdAt" title="@asset.CreatedAt.ToString("MM/dd/yyyy HH:mm")">@asset.CreatedAt.ToString("MM/dd/yyyy")</td>
                                 <td class="column-createdBy" title="@asset.CreatedBy">@asset.CreatedBy</td>
                                <td class="column-actions">
                                    <div class="btn-group btn-group-sm" role="group">
                                        <a asp-action="Details" asp-route-id="@asset.Id" class="btn btn-outline-primary" title="View Details">
                                            <i class="bi bi-eye"></i>
                                        </a>
                                        <a asp-action="Edit" asp-route-id="@asset.Id" class="btn btn-outline-secondary" title="Edit">
                                            <i class="bi bi-pencil"></i>
                                        </a>
                                        <a asp-action="Delete" asp-route-id="@asset.Id" class="btn btn-outline-danger" title="Delete">
                                            <i class="bi bi-trash"></i>
                                        </a>
                                        
                                        <!-- Lifecycle Actions Dropdown -->
                                            <div class="btn-group btn-group-sm" role="group">
                                                <button type="button" class="btn btn-outline-info dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false" title="Lifecycle Actions">
                                                    <i class="bi bi-arrow-repeat"></i>
                                                </button>
                                                <ul class="dropdown-menu lifecycle-actions" data-asset-tag="@asset.AssetTag">
                                                    @if (asset.Floor?.ToLower() == "storage")
                                                    {
                                                        <!-- Assets in Storage -->
                                                        <li><a class="dropdown-item" href="#" onclick="deployAsset('@asset.AssetTag')"><i class="bi bi-laptop"></i> Assign To</a></li>
                                                        <li><a class="dropdown-item" href="#" onclick="markForSalvage('@asset.AssetTag')"><i class="bi bi-recycle"></i> Mark for Salvage</a></li>
                                                    }
                                                    else
                                                    {
                                                        <!-- Assets not in Storage -->
                                                        @if (!string.IsNullOrEmpty(asset.AssignedUserName) && asset.AssignedUserName.ToLower() != "vacant")
                                                        {
                                                            <li><a class="dropdown-item" href="#" onclick="deployAsset('@asset.AssetTag')"><i class="bi bi-laptop"></i> Re-Assign To</a></li>
                                                        }
                                                        else
                                                        {
                                                            <li><a class="dropdown-item" href="#" onclick="deployAsset('@asset.AssetTag')"><i class="bi bi-laptop"></i> Assign To</a></li>
                                                        }
                                                        <li><a class="dropdown-item" href="#" onclick="moveToStorage('@asset.AssetTag')"><i class="bi bi-box"></i> Move to Storage</a></li>
                                                        <li><a class="dropdown-item" href="#" onclick="markForSalvage('@asset.AssetTag')"><i class="bi bi-recycle"></i> Mark for Salvage</a></li>
                                                    }
                                                    <li><hr class="dropdown-divider"></li>
                                                    <li><a class="dropdown-item" href="#" onclick="showLifecycleHistory('@asset.AssetTag')"><i class="bi bi-clock-history"></i> History</a></li>
                                                </ul>
                                            </div>
                                        
                                        <!-- Facilities Driver Actions -->
                                            <div class="btn-group btn-group-sm" role="group">
                                                <button type="button" class="btn btn-outline-warning dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false" title="Facilities Driver Actions">
                                                    <i class="bi bi-truck"></i>
                                                </button>
                                                <ul class="dropdown-menu facilities-actions" data-asset-tag="@asset.AssetTag">
                                                    <li><a class="dropdown-item" href="#" onclick="pickupAsset('@asset.AssetTag')"><i class="bi bi-box-arrow-up"></i> Pickup Asset</a></li>
                                                    <li><a class="dropdown-item" href="#" onclick="deliverAsset('@asset.AssetTag')"><i class="bi bi-box-arrow-down"></i> Deliver Asset</a></li>
                                                    <li><hr class="dropdown-divider"></li>
                                                    <li><a class="dropdown-item" href="#" onclick="reassignLocationAfterDelivery('@asset.AssetTag')"><i class="bi bi-geo-alt"></i> Reassign Location</a></li>
                                                </ul>
                                            </div>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            @if (Model.TotalPages > 1)
            {
                <div class="d-flex justify-content-between align-items-center mt-3">
                    <div class="text-muted">
                        Showing @((Model.PageIndex - 1) * Model.PageSize + 1) to @Math.Min(Model.PageIndex * Model.PageSize, Model.TotalCount) of @Model.TotalCount assets
                    </div>
                    <nav aria-label="Asset pagination">
                        <ul class="pagination pagination-sm mb-0">
                            @if (Model.HasPreviousPage)
                            {
                                <li class="page-item">
                                    <a class="page-link" asp-action="Index" asp-all-route-data="@GenerateSortRouteValues(ViewData["CurrentSort"]?.ToString())" asp-route-page="@(Model.PageIndex - 1)">
                                        <i class="bi bi-chevron-left"></i> Previous
                                    </a>
                                </li>
                            }
                            else
                            {
                                <li class="page-item disabled">
                                    <span class="page-link">
                                        <i class="bi bi-chevron-left"></i> Previous
                                    </span>
                                </li>
                            }

                            @{
                                var startPage = Math.Max(1, Model.PageIndex - 2);
                                var endPage = Math.Min(Model.TotalPages, Model.PageIndex + 2);
                            }

                            @if (startPage > 1)
                            {
                                <li class="page-item">
                                    <a class="page-link" asp-action="Index" asp-all-route-data="@GenerateSortRouteValues(ViewData["CurrentSort"]?.ToString())" asp-route-page="1">1</a>
                                </li>
                                @if (startPage > 2)
                                {
                                    <li class="page-item disabled">
                                        <span class="page-link">...</span>
                                    </li>
                                }
                            }

                            @for (int i = startPage; i <= endPage; i++)
                            {
                                <li class="page-item @(i == Model.PageIndex ? "active" : "")">
                                    <a class="page-link" asp-action="Index" asp-all-route-data="@GenerateSortRouteValues(ViewData["CurrentSort"]?.ToString())" asp-route-page="@i">@i</a>
                                </li>
                            }

                            @if (endPage < Model.TotalPages)
                            {
                                @if (endPage < Model.TotalPages - 1)
                                {
                                    <li class="page-item disabled">
                                        <span class="page-link">...</span>
                                    </li>
                                }
                                <li class="page-item">
                                    <a class="page-link" asp-action="Index" asp-all-route-data="@GenerateSortRouteValues(ViewData["CurrentSort"]?.ToString())" asp-route-page="@Model.TotalPages">@Model.TotalPages</a>
                                </li>
                            }

                            @if (Model.HasNextPage)
                            {
                                <li class="page-item">
                                    <a class="page-link" asp-action="Index" asp-all-route-data="@GenerateSortRouteValues(ViewData["CurrentSort"]?.ToString())" asp-route-page="@(Model.PageIndex + 1)">
                                        Next <i class="bi bi-chevron-right"></i>
                                    </a>
                                </li>
                            }
                            else
                            {
                                <li class="page-item disabled">
                                    <span class="page-link">
                                        Next <i class="bi bi-chevron-right"></i>
                                    </span>
                                </li>
                            }
                        </ul>
                    </nav>
                </div>
            }
            else
            {
                <div class="mt-3">
                    <small class="text-muted">Showing @Model.TotalCount assets</small>
                </div>
            }
        }
        else
        {
            <div class="text-center py-5">
                <i class="bi bi-pc-display fa-3x text-muted mb-3"></i>
                <h4 class="text-muted">No Assets Found</h4>
                <p class="text-muted">
                    No assets have been added yet. Start by adding assets manually or importing from Excel.
                </p>
                @if (User.IsInRole("Admin") || User.IsInRole("IT") || User.IsInRole("Procurement"))
                {
                    <div class="mt-3">
                        <a asp-action="Create" class="btn btn-primary me-2">
                            <i class="bi bi-plus-circle"></i> Add Asset
                        </a>
                        <a asp-action="Import" class="btn btn-success">
                            <i class="bi bi-upload"></i> Import Assets
                        </a>
                    </div>
                }
            </div>
        }
    </div>
</div>

    <script>
        function toggleAdminOperations() {
            const body = document.getElementById('adminOperationsBody');
            const icon = document.getElementById('adminOperationsIcon');
            
            if (body.style.display === 'none') {
                body.style.display = 'block';
                icon.className = 'bi bi-chevron-down admin-operations-icon';
                localStorage.setItem('adminOperationsCollapsed', 'false');
            } else {
                body.style.display = 'none';
                icon.className = 'bi bi-chevron-right admin-operations-icon';
                localStorage.setItem('adminOperationsCollapsed', 'true');
            }
        }
        
        function initializeAdminOperations() {
            const body = document.getElementById('adminOperationsBody');
            const icon = document.getElementById('adminOperationsIcon');
            const savedState = localStorage.getItem('adminOperationsCollapsed');
            
            // Default to collapsed (null means first visit, so collapse by default)
            const isCollapsed = savedState === null ? true : savedState === 'true';
            
            if (isCollapsed) {
                body.style.display = 'none';
                icon.className = 'bi bi-chevron-right admin-operations-icon';
            } else {
                body.style.display = 'block';
                icon.className = 'bi bi-chevron-down admin-operations-icon';
            }
        }
        

        

        
        function submitBulkDelete() {
            const selectedCheckboxes = document.querySelectorAll('.asset-checkbox:checked');
            
            if (selectedCheckboxes.length === 0) {
                alert('No assets selected for deletion.');
                return;
            }
            
            if (!confirm('Are you sure you want to delete the selected assets?')) {
                return;
            }
            
            // Create form data with selected IDs
            const formData = new FormData();
            selectedCheckboxes.forEach(checkbox => {
                formData.append('selectedIds', checkbox.value);
            });
            
            // Submit the form
            fetch('@Url.Action("BulkDelete", "Assets")', {
                method: 'POST',
                body: formData,
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                }
            })
            .then(response => {
                if (response.ok) {
                    window.location.reload();
                } else {
                    alert('Error deleting assets. Please try again.');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error deleting assets. Please try again.');
            });
        }
        
        // Initialize on page load
        document.addEventListener('DOMContentLoaded', function() {
            updateBulkDeleteButton();
            restoreCartItems();
            initializeAdminOperations();
        });
        
    </script>

<!-- Cart Preview Modal -->
<div class="modal fade" id="cartPreviewModal" tabindex="-1" aria-labelledby="cartPreviewModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cartPreviewModalLabel">
                    <i class="bi bi-cart3"></i> Cart Preview
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="cartPreviewContent">
                    <!-- Cart items will be populated here -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" onclick="selectMoreItems()">Select More..</button>
                <button type="button" class="btn btn-primary" onclick="goToCart()">
                    <i class="bi bi-cart-check"></i> Go to Cart
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Column Settings Modal -->
<div class="modal fade" id="columnSettingsModal" tabindex="-1" aria-labelledby="columnSettingsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="columnSettingsModalLabel">
                    <i class="bi bi-gear"></i> Column Settings
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Role Presets Section -->
                <div class="row mb-3">
                    <div class="col-12">
                        <h6><i class="bi bi-person-badge"></i> Quick Role Presets</h6>
                        <div class="d-flex flex-wrap gap-2">
                            <button type="button" class="btn btn-outline-primary btn-sm" onclick="applyRolePreset('procurement')">
                                <i class="bi bi-cart"></i> Procurement
                            </button>
                            <button type="button" class="btn btn-outline-success btn-sm" onclick="applyRolePreset('techs')">
                                <i class="bi bi-tools"></i> Techs
                            </button>
                            <button type="button" class="btn btn-outline-warning btn-sm" onclick="applyRolePreset('security')">
                                <i class="bi bi-shield"></i> Security
                            </button>
                            <button type="button" class="btn btn-outline-info btn-sm" onclick="applyRolePreset('clerical')">
                                <i class="bi bi-file-text"></i> Clerical
                            </button>
                            <button type="button" class="btn btn-outline-secondary btn-sm" onclick="applyRolePreset('facilities')">
                                <i class="bi bi-building"></i> Facilities
                            </button>
                        </div>
                    </div>
                </div>
                
                <div class="row">
                    <div class="col-md-6">
                        <h6>Available Columns</h6>
                        <div id="availableColumns" class="border rounded p-3" style="min-height: 300px;">
                            <!-- Available columns will be populated by JavaScript -->
                        </div>
                    </div>
                    <div class="col-md-6">
                        <h6>Visible Columns (Drag to reorder)</h6>
                        <div id="visibleColumns" class="border rounded p-3" style="min-height: 300px;">
                            <!-- Visible columns will be populated by JavaScript -->
                        </div>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-12">
                        <div class="d-flex gap-2">
                            <button type="button" class="btn btn-primary" onclick="addSelectedColumns()">
                                <i class="bi bi-arrow-right"></i> Add Selected
                            </button>
                            <button type="button" class="btn btn-secondary" onclick="removeSelectedColumns()">
                                <i class="bi bi-arrow-left"></i> Remove Selected
                            </button>
                            <button type="button" class="btn btn-outline-secondary" onclick="resetToDefault()">
                                <i class="bi bi-arrow-clockwise"></i> Reset to Default
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="applyColumnSettings()">Apply Settings</button>
            </div>
        </div>
    </div>
</div>

<!-- Column Filter Modal -->
<div class="modal fade" id="columnFilterModal" tabindex="-1" aria-labelledby="columnFilterModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="columnFilterModalLabel">Filter <span id="filterColumnName"></span></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6">
                        <h6>Available Values</h6>
                        <div class="mb-3">
                            <input type="text" class="form-control" id="filterSearch" placeholder="Search values..." onkeyup="filterAvailableValues()">
                        </div>
                        <div class="border rounded p-2" style="max-height: 300px; overflow-y: auto;">
                            <div id="availableValues" class="d-flex flex-column gap-1">
                                <!-- Available values will be populated here -->
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <h6>Selected Values</h6>
                        <div class="border rounded p-2" style="max-height: 300px; overflow-y: auto;">
                            <div id="selectedValues" class="d-flex flex-column gap-1">
                                <!-- Selected values will be populated here -->
                            </div>
                        </div>
                        <div class="mt-2">
                            <button type="button" class="btn btn-sm btn-outline-secondary" onclick="clearSelectedValues()">Clear All</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="applyColumnFilter()">Apply Filter</button>
            </div>
        </div>
    </div>
</div>

<script>
    // Column settings functionality
    const defaultColumns = [
        { id: 'assetTag', name: 'Asset Tag', visible: true, sortable: true },
        { id: 'serialNumber', name: 'Serial Number', visible: true, sortable: true },
        { id: 'serviceTag', name: 'Service Tag', visible: false, sortable: true },
        { id: 'manufacturer', name: 'Manufacturer', visible: true, sortable: true },
        { id: 'model', name: 'Model', visible: true, sortable: true },
        { id: 'category', name: 'Category', visible: true, sortable: true },
        { id: 'netName', name: 'Net Name', visible: false, sortable: true },
        { id: 'assignedUser', name: 'Assigned User', visible: true, sortable: true },
        { id: 'assignedUserEmail', name: 'Assigned User Email', visible: false, sortable: true },
        { id: 'manager', name: 'Manager', visible: false, sortable: true },
        { id: 'department', name: 'Department', visible: true, sortable: true },
        { id: 'unit', name: 'Unit', visible: false, sortable: true },
        { id: 'location', name: 'Location', visible: true, sortable: true },
        { id: 'floor', name: 'Floor', visible: false, sortable: true },
        { id: 'desk', name: 'Desk', visible: false, sortable: true },
        { id: 'status', name: 'Status', visible: true, sortable: true },
        { id: 'ipAddress', name: 'IP Address', visible: false, sortable: true },
        { id: 'macAddress', name: 'MAC Address', visible: false, sortable: true },
        { id: 'wallPort', name: 'Wall Port', visible: false, sortable: true },
        { id: 'switchName', name: 'Switch Name', visible: false, sortable: true },
        { id: 'switchPort', name: 'Switch Port', visible: false, sortable: true },
        { id: 'phoneNumber', name: 'Phone Number', visible: false, sortable: true },
        { id: 'extension', name: 'Extension', visible: false, sortable: true },
        { id: 'imei', name: 'IMEI', visible: false, sortable: true },
        { id: 'cardNumber', name: 'Card Number', visible: false, sortable: true },
        { id: 'osVersion', name: 'OS Version', visible: false, sortable: true },
        { id: 'license1', name: 'License1', visible: false, sortable: true },
        { id: 'license2', name: 'License2', visible: false, sortable: true },
        { id: 'license3', name: 'License3', visible: false, sortable: true },
        { id: 'license4', name: 'License4', visible: false, sortable: true },
        { id: 'license5', name: 'License5', visible: false, sortable: true },
        { id: 'purchaseOrderNumber', name: 'Purchase Order Number', visible: false, sortable: true },
        { id: 'vendor', name: 'Vendor', visible: false, sortable: true },
        { id: 'vendorInvoice', name: 'Vendor Invoice', visible: false, sortable: true },
        { id: 'purchaseDate', name: 'Purchase Date', visible: false, sortable: true },
        { id: 'warrantyStart', name: 'Warranty Start', visible: false, sortable: true },
        { id: 'warrantyEnd', name: 'Warranty End', visible: false, sortable: true },
        { id: 'notes', name: 'Notes', visible: false, sortable: true },
        { id: 'createdAt', name: 'Created At', visible: false, sortable: true },
        { id: 'createdBy', name: 'Created By', visible: false, sortable: true },
        { id: 'actions', name: 'Actions', visible: true, sortable: false }
    ];

    let currentColumns = JSON.parse(localStorage.getItem('assetColumns')) || [...defaultColumns];

    // Role-based column presets
    const rolePresets = {
        procurement: {
            name: 'Procurement',
            columns: ['assetTag', 'serialNumber', 'manufacturer', 'model', 'category', 'purchaseOrderNumber', 'vendor', 'vendorInvoice', 'purchaseDate', 'warrantyStart', 'warrantyEnd', 'status', 'notes', 'actions']
        },
        techs: {
            name: 'Techs',
            columns: ['assetTag', 'serialNumber', 'serviceTag', 'manufacturer', 'model', 'category', 'netName', 'assignedUser', 'assignedUserEmail', 'department', 'location', 'floor', 'desk', 'status', 'ipAddress', 'macAddress', 'wallPort', 'switchName', 'switchPort', 'osVersion', 'license1', 'license2', 'license3', 'license4', 'license5', 'warrantyEnd', 'notes', 'actions']
        },
        security: {
            name: 'Security',
            columns: ['assetTag', 'serialNumber', 'manufacturer', 'model', 'category', 'assignedUser', 'assignedUserEmail', 'department', 'location', 'floor', 'desk', 'status', 'phoneNumber', 'extension', 'imei', 'cardNumber', 'notes', 'actions']
        },
        clerical: {
            name: 'Clerical',
            columns: ['assetTag', 'serialNumber', 'manufacturer', 'model', 'category', 'assignedUser', 'assignedUserEmail', 'manager', 'department', 'unit', 'location', 'status', 'purchaseDate', 'warrantyEnd', 'notes', 'actions']
        },
        facilities: {
            name: 'Facilities',
            columns: ['assetTag', 'serialNumber', 'manufacturer', 'model', 'category', 'assignedUser', 'department', 'location', 'floor', 'desk', 'status', 'wallPort', 'switchName', 'switchPort', 'purchaseDate', 'warrantyEnd', 'notes', 'actions']
        }
    };

    function applyRolePreset(roleKey) {
        const preset = rolePresets[roleKey];
        if (!preset) {
            console.error('Unknown role preset:', roleKey);
            return;
        }

        // Reset all columns to not visible
        currentColumns.forEach(col => {
            col.visible = false;
        });

        // Set the specified columns to visible
        preset.columns.forEach(columnId => {
            const column = currentColumns.find(col => col.id === columnId);
            if (column) {
                column.visible = true;
            }
        });

        // Update the UI
        populateAvailableColumns();
        populateVisibleColumns();

        // Show confirmation
        const toast = document.createElement('div');
        toast.className = 'toast align-items-center text-white bg-success border-0 position-fixed';
        toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999;';
        toast.innerHTML = `
            <div class="d-flex">
                <div class="toast-body">
                    <i class="bi bi-check-circle"></i> Applied ${preset.name} preset
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
            </div>
        `;
        document.body.appendChild(toast);
        
        const bsToast = new bootstrap.Toast(toast);
        bsToast.show();
        
        // Remove toast after it's hidden
        toast.addEventListener('hidden.bs.toast', () => {
            document.body.removeChild(toast);
        });
    }

    function initializeColumnSettings() {
        populateAvailableColumns();
        populateVisibleColumns();
    }

    function populateAvailableColumns() {
        const container = document.getElementById('availableColumns');
        container.innerHTML = '';
        
        const availableColumns = currentColumns.filter(col => !col.visible);
        
        availableColumns.forEach(column => {
            const div = document.createElement('div');
            div.className = 'form-check mb-2';
            div.innerHTML = `
                <input class="form-check-input" type="checkbox" value="${column.id}" id="available_${column.id}">
                <label class="form-check-label" for="available_${column.id}">
                    ${column.name}
                </label>
            `;
            container.appendChild(div);
        });
    }

    function populateVisibleColumns() {
        const container = document.getElementById('visibleColumns');
        container.innerHTML = '';
        
        const visibleColumns = currentColumns.filter(col => col.visible);
        
        visibleColumns.forEach((column, index) => {
            const div = document.createElement('div');
            div.className = 'visible-column-item mb-2 p-2 border rounded';
            div.draggable = true;
            div.dataset.columnId = column.id;
            div.dataset.index = index;
            div.innerHTML = `
                <div class="d-flex align-items-center">
                    <div class="drag-handle me-2" style="cursor: grab;">
                        <i class="bi bi-grip-vertical text-muted"></i>
                    </div>
                    <div class="form-check flex-grow-1">
                        <input class="form-check-input" type="checkbox" value="${column.id}" id="visible_${column.id}">
                        <label class="form-check-label" for="visible_${column.id}">
                            ${column.name}
                        </label>
                    </div>
                    <div class="btn-group btn-group-sm">
                        <button type="button" class="btn btn-outline-secondary" onclick="moveColumn(${index}, 'up')" ${index === 0 ? 'disabled' : ''}>
                            <i class="bi bi-arrow-up"></i>
                        </button>
                        <button type="button" class="btn btn-outline-secondary" onclick="moveColumn(${index}, 'down')" ${index === visibleColumns.length - 1 ? 'disabled' : ''}>
                            <i class="bi bi-arrow-down"></i>
                        </button>
                    </div>
                </div>
            `;
            
            // Add drag event listeners
            div.addEventListener('dragstart', handleDragStart);
            div.addEventListener('dragover', handleDragOver);
            div.addEventListener('drop', handleDrop);
            div.addEventListener('dragenter', handleDragEnter);
            div.addEventListener('dragleave', handleDragLeave);
            
            container.appendChild(div);
        });
        
        // Add drop zone event listeners to container
        container.addEventListener('dragover', handleDragOver);
        container.addEventListener('drop', handleDrop);
    }

    function addSelectedColumns() {
        const checkboxes = document.querySelectorAll('#availableColumns input[type="checkbox"]:checked');
        checkboxes.forEach(checkbox => {
            const columnId = checkbox.value;
            const column = currentColumns.find(col => col.id === columnId);
            if (column) {
                column.visible = true;
            }
        });
        populateAvailableColumns();
        populateVisibleColumns();
    }

    function removeSelectedColumns() {
        const checkboxes = document.querySelectorAll('#visibleColumns input[type="checkbox"]:checked');
        checkboxes.forEach(checkbox => {
            const columnId = checkbox.value;
            const column = currentColumns.find(col => col.id === columnId);
            if (column) {
                column.visible = false;
            }
        });
        populateAvailableColumns();
        populateVisibleColumns();
    }

    function resetToDefault() {
        currentColumns = [...defaultColumns];
        populateAvailableColumns();
        populateVisibleColumns();
    }
    
    // Drag and drop functionality
    let draggedElement = null;
    
    function handleDragStart(e) {
        draggedElement = e.target.closest('.visible-column-item');
        e.dataTransfer.effectAllowed = 'move';
        e.dataTransfer.setData('text/html', draggedElement.outerHTML);
        draggedElement.classList.add('dragging');
    }
    
    function handleDragOver(e) {
        e.preventDefault();
        e.dataTransfer.dropEffect = 'move';
    }
    
    function handleDragEnter(e) {
        e.preventDefault();
        const target = e.target.closest('.visible-column-item');
        if (target && target !== draggedElement) {
            target.classList.add('drag-over');
        }
    }
    
    function handleDragLeave(e) {
        const target = e.target.closest('.visible-column-item');
        if (target) {
            target.classList.remove('drag-over');
        }
    }
    
    function handleDrop(e) {
        e.preventDefault();
        const target = e.target.closest('.visible-column-item');
        
        if (target && draggedElement && target !== draggedElement) {
            const fromIndex = parseInt(draggedElement.dataset.index);
            const toIndex = parseInt(target.dataset.index);
            
            // Reorder the visible columns
            const visibleColumns = currentColumns.filter(col => col.visible);
            const movedColumn = visibleColumns.splice(fromIndex, 1)[0];
            visibleColumns.splice(toIndex, 0, movedColumn);
            
            // Update currentColumns with new order
            const hiddenColumns = currentColumns.filter(col => !col.visible);
            currentColumns = [...visibleColumns, ...hiddenColumns];
            
            // Re-render the visible columns
            populateVisibleColumns();
        }
        
        // Clean up
        document.querySelectorAll('.visible-column-item').forEach(item => {
            item.classList.remove('dragging', 'drag-over');
        });
        draggedElement = null;
    }
    
    function moveColumn(index, direction) {
        const visibleColumns = currentColumns.filter(col => col.visible);
        if (direction === 'up' && index > 0) {
            [visibleColumns[index], visibleColumns[index - 1]] = [visibleColumns[index - 1], visibleColumns[index]];
        } else if (direction === 'down' && index < visibleColumns.length - 1) {
            [visibleColumns[index], visibleColumns[index + 1]] = [visibleColumns[index + 1], visibleColumns[index]];
        }
        
        // Update currentColumns with new order
        const hiddenColumns = currentColumns.filter(col => !col.visible);
        currentColumns = [...visibleColumns, ...hiddenColumns];
        
        populateVisibleColumns();
    }

    function applyColumnSettings() {
        localStorage.setItem('assetColumns', JSON.stringify(currentColumns));
        renderTable();
        
        // Update navigation visibility after applying settings
        setTimeout(() => {
            if (window.checkNavigationVisibility) {
                window.checkNavigationVisibility();
            }
        }, 200);
        
        // Close the modal
        const modal = bootstrap.Modal.getInstance(document.getElementById('columnSettingsModal'));
        if (modal) {
            modal.hide();
        }
    }

    // Initialize column settings when modal is shown
    document.getElementById('columnSettingsModal').addEventListener('show.bs.modal', function () {
        initializeColumnSettings();
    });

    // Function to render the table based on column settings
    function renderTable() {
        const visibleColumns = currentColumns.filter(col => col.visible);
        
        // Get the table and its rows
        const table = document.querySelector('table');
        const thead = table.querySelector('thead tr');
        const tbodyRows = Array.from(table.querySelectorAll('tbody tr'));
        
        // Hide all columns first
        document.querySelectorAll('th, td').forEach(element => {
            element.style.display = 'none';
        });
        
        // Always show admin checkbox column if it exists
        const adminCheckboxElements = document.querySelectorAll('th:first-child, td:first-child');
        adminCheckboxElements.forEach(element => {
            element.style.display = '';
        });
        
        // Reorder and show visible columns in the correct order
        visibleColumns.forEach((column, index) => {
            const columnIndex = index + 1; // +1 because we have the checkbox column at index 0
            
            // Get all column elements for this column
            const headerCell = thead.querySelector(`.column-${column.id}`);
            const dataCells = tbodyRows.map(row => row.querySelector(`.column-${column.id}`));
            
            if (headerCell) {
                // Show the header
                headerCell.style.display = '';
                
                // Move header to correct position
                const targetHeaderIndex = columnIndex;
                if (headerCell.parentNode.children[targetHeaderIndex] !== headerCell) {
                    thead.insertBefore(headerCell, thead.children[targetHeaderIndex]);
                }
            }
            
            // Show and reorder data cells
            dataCells.forEach((cell, rowIndex) => {
                if (cell) {
                    cell.style.display = '';
                    
                    // Move data cell to correct position
                    const targetDataIndex = columnIndex;
                    const row = tbodyRows[rowIndex];
                    if (row.children[targetDataIndex] !== cell) {
                        row.insertBefore(cell, row.children[targetDataIndex]);
                    }
                }
            });
        });
        
        // Update navigation visibility after rendering
        if (window.checkNavigationVisibility) {
            setTimeout(window.checkNavigationVisibility, 100);
        }
    }

    // Initialize table on page load
    document.addEventListener('DOMContentLoaded', function() {
        renderTable();
        initializeTableNavigation();
    });
    
    // Horizontal navigation functionality
    function initializeTableNavigation() {
        const navLeft = document.getElementById('navLeftInline');
        const navRight = document.getElementById('navRightInline');
        const progressContainer = document.getElementById('scrollProgressContainer');
        const progressBar = document.getElementById('scrollProgressBar');
        const tableContainer = document.querySelector('.table-container');
        
        if (!navLeft || !navRight || !progressContainer || !progressBar || !tableContainer) return;
        
        // Check if navigation should be shown
        function checkNavigationVisibility() {
            const visibleColumns = currentColumns.filter(col => col.visible);
            const shouldShowNav = visibleColumns.length > 10;
            
            navLeft.style.display = shouldShowNav ? 'flex' : 'none';
            navRight.style.display = shouldShowNav ? 'flex' : 'none';
            progressContainer.style.display = shouldShowNav ? 'block' : 'none';
            
            if (shouldShowNav) {
                updateNavigationState();
            }
        }
        
        // Update navigation button states and progress bar
        function updateNavigationState() {
            const scrollLeft = tableContainer.scrollLeft;
            const maxScroll = tableContainer.scrollWidth - tableContainer.clientWidth;
            
            navLeft.classList.toggle('disabled', scrollLeft <= 0);
            navRight.classList.toggle('disabled', scrollLeft >= maxScroll);
            
            // Update progress bar
            if (maxScroll > 0) {
                const progressPercentage = (scrollLeft / maxScroll) * 100;
                progressBar.style.width = progressPercentage + '%';
            } else {
                progressBar.style.width = '0%';
            }
        }
        
        // Navigation event listeners
        navLeft.addEventListener('click', function() {
            if (!navLeft.classList.contains('disabled')) {
                tableContainer.scrollBy({
                    left: -200,
                    behavior: 'smooth'
                });
            }
        });
        
        navRight.addEventListener('click', function() {
            if (!navRight.classList.contains('disabled')) {
                tableContainer.scrollBy({
                    left: 200,
                    behavior: 'smooth'
                });
            }
        });
        
        // Update navigation state on scroll
        tableContainer.addEventListener('scroll', updateNavigationState);
        
        // Update navigation state on window resize
        window.addEventListener('resize', function() {
            setTimeout(updateNavigationState, 100);
        });
        
        // Initial check
        checkNavigationVisibility();
        
        // Store the function globally so it can be called from renderTable
        window.checkNavigationVisibility = checkNavigationVisibility;
    }
    
    function exportVisibleColumns() {
        // Get the visible columns in their current order from the table
        const visibleColumns = currentColumns.filter(col => col.visible);
        
        // Ensure we have the correct order by checking the table headers
        const tableHeaders = document.querySelectorAll('thead th[class*="column-"]');
        const orderedColumnIds = [];
        
        tableHeaders.forEach(header => {
            const className = header.className;
            const columnId = className.match(/column-(\w+)/)?.[1];
            if (columnId && visibleColumns.some(col => col.id === columnId)) {
                orderedColumnIds.push(columnId);
            }
        });
        
        // If we couldn't get the order from the table, fall back to the current order
        const finalColumnIds = orderedColumnIds.length > 0 ? orderedColumnIds : visibleColumns.map(col => col.id);
        const columnIds = finalColumnIds.join(',');
        
        // Debug logging
        console.log('Visible columns:', visibleColumns.map(col => ({ id: col.id, name: col.name })));
        console.log('Table header order:', orderedColumnIds);
        console.log('Final column IDs being sent:', columnIds);
        
        if (columnIds.length === 0) {
            alert('No columns are visible for export. Please select some columns first.');
            return;
        }

        // Get current search term and sort order to maintain filtering
        const searchTerm = document.querySelector('input[name="searchTerm"]')?.value || '';
        const currentSort = '@ViewData["CurrentSort"]' || '';

        // Build the export URL with parameters
        const params = new URLSearchParams({
            columnIds: columnIds,
            searchTerm: searchTerm,
            sortOrder: currentSort
        });

        // Debug logging
        console.log('Export URL parameters:', params.toString());

        // Create a temporary link to download the Excel file
        const exportUrl = '@Url.Action("ExportVisibleColumns", "Assets")?' + params.toString();
        
        // Create a temporary anchor element to trigger download
        const a = document.createElement('a');
        a.href = exportUrl;
        a.style.display = 'none';
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
    }
    
    // Inline editing functionality
    document.addEventListener('DOMContentLoaded', function() {
        initializeInlineEditing();
    });
    
    function initializeInlineEditing() {
        const editableCells = document.querySelectorAll('.editable-cell');
        
        editableCells.forEach(cell => {
            cell.addEventListener('dblclick', function(e) {
                e.preventDefault();
                e.stopPropagation();
                
                if (cell.classList.contains('editing')) return;
                
                const field = cell.dataset.field;
                const assetId = cell.dataset.id;
                const currentValue = getCellValue(cell);
                
                startEditing(cell, field, assetId, currentValue);
            });
        });
    }
    
    function getCellValue(cell) {
        // Handle different cell content types
        const badge = cell.querySelector('.badge');
        if (badge) {
            return badge.textContent.trim();
        }
        
        const strong = cell.querySelector('strong');
        if (strong) {
            return strong.textContent.trim();
        }
        
        return cell.textContent.trim();
    }
    
    function startEditing(cell, field, assetId, currentValue) {
        cell.classList.add('editing');
        
        let inputElement;
        
        // Create appropriate input element based on field type
        if (field === 'Status') {
            inputElement = createStatusDropdown(currentValue);
        } else if (field === 'Location') {
            inputElement = createLocationDropdown(currentValue);
        } else if (field === 'Category') {
            inputElement = createCategoryDropdown(currentValue);
        } else {
            inputElement = createTextInput(currentValue);
        }
        
        // Clear cell content and add input
        cell.innerHTML = '';
        cell.appendChild(inputElement);
        
        // Focus and select text
        inputElement.focus();
        if (inputElement.type === 'text') {
            inputElement.select();
        }
        
        // Handle save on Enter or blur
        inputElement.addEventListener('keydown', function(e) {
            if (e.key === 'Enter') {
                saveEdit(cell, field, assetId, inputElement.value);
            } else if (e.key === 'Escape') {
                cancelEdit(cell, currentValue);
            }
        });
        
        inputElement.addEventListener('blur', function() {
            setTimeout(() => {
                if (cell.classList.contains('editing')) {
                    saveEdit(cell, field, assetId, inputElement.value);
                }
            }, 100);
        });
    }
    
    function createTextInput(value) {
        const input = document.createElement('input');
        input.type = 'text';
        input.value = value;
        input.className = 'form-control form-control-sm';
        return input;
    }
    
    function createStatusDropdown(currentValue) {
        const select = document.createElement('select');
        select.className = 'status-dropdown form-select form-select-sm';
        
        const statuses = ['Active', 'Inactive', 'Maintenance', 'Retired'];
        statuses.forEach(status => {
            const option = document.createElement('option');
            option.value = status;
            option.textContent = status;
            if (status === currentValue) {
                option.selected = true;
            }
            select.appendChild(option);
        });
        
        return select;
    }
    
    function createLocationDropdown(currentValue) {
        const select = document.createElement('select');
        select.className = 'location-dropdown form-select form-select-sm';
        
        const locations = ['100CHURCH', 'LIC', 'BROOKLYN', 'BRONX', 'STATEN ISLAND', '66JOHN'];
        locations.forEach(location => {
            const option = document.createElement('option');
            option.value = location;
            option.textContent = location;
            if (location === currentValue) {
                option.selected = true;
            }
            select.appendChild(option);
        });
        
        return select;
    }
    
    function createCategoryDropdown(currentValue) {
        const select = document.createElement('select');
        select.className = 'form-select form-select-sm';
        
        const categories = ['Desktop', 'Laptop', 'Monitor', 'Printer', 'Phone', 'Tablet', 'Server', 'Network', 'Other'];
        categories.forEach(category => {
            const option = document.createElement('option');
            option.value = category;
            option.textContent = category;
            if (category === currentValue) {
                option.selected = true;
            }
            select.appendChild(option);
        });
        
        return select;
    }
    
    function saveEdit(cell, field, assetId, newValue) {
        // Show loading state
        cell.innerHTML = '<i class="bi bi-hourglass-split"></i> Saving...';
        
        // Send AJAX request
        fetch('/Assets/UpdateField', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
            },
            body: new URLSearchParams({
                id: assetId,
                field: field,
                value: newValue
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                updateCellContent(cell, field, newValue);
                showToast('Success', 'Field updated successfully', 'success');
            } else {
                // Restore original content on error
                const originalValue = cell.dataset.originalValue || '';
                updateCellContent(cell, field, originalValue);
                showToast('Error', data.message || 'Failed to update field', 'error');
            }
        })
        .catch(error => {
            console.error('Error updating field:', error);
            const originalValue = cell.dataset.originalValue || '';
            updateCellContent(cell, field, originalValue);
            showToast('Error', 'Network error occurred', 'error');
        })
        .finally(() => {
            cell.classList.remove('editing');
        });
    }
    
    function cancelEdit(cell, originalValue) {
        updateCellContent(cell, cell.dataset.field, originalValue);
        cell.classList.remove('editing');
    }
    
    function updateCellContent(cell, field, value) {
        if (field === 'Status') {
            const statusClass = getStatusClass(value);
            cell.innerHTML = `<span class="badge ${statusClass}">${value}</span>`;
        } else if (field === 'AssetTag') {
            cell.innerHTML = `<strong>${value}</strong>`;
        } else if (field === 'Category') {
            cell.innerHTML = `<span class="badge bg-secondary">${value}</span>`;
        } else {
            cell.textContent = value;
        }
        
        // Update title attribute
        cell.title = value;
    }
    
    function getStatusClass(status) {
        switch (status?.toLowerCase()) {
            case 'active': return 'bg-success';
            case 'inactive': return 'bg-secondary';
            case 'maintenance': return 'bg-warning';
            case 'retired': return 'bg-danger';
            default: return 'bg-info';
        }
    }
    
    function showToast(title, message, type) {
        // Create toast notification
        const toast = document.createElement('div');
        toast.className = `toast align-items-center text-white bg-${type === 'success' ? 'success' : 'danger'} border-0`;
        toast.setAttribute('role', 'alert');
        toast.setAttribute('aria-live', 'assertive');
        toast.setAttribute('aria-atomic', 'true');
        
        toast.innerHTML = `
            <div class="d-flex">
                <div class="toast-body">
                    <strong>${title}:</strong> ${message}
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        `;
        
        // Add to page if toast container doesn't exist
        let toastContainer = document.getElementById('toast-container');
        if (!toastContainer) {
            toastContainer = document.createElement('div');
            toastContainer.id = 'toast-container';
            toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';
            toastContainer.style.zIndex = '9999';
            document.body.appendChild(toastContainer);
        }
        
        toastContainer.appendChild(toast);
        
        // Show toast
        const bsToast = new bootstrap.Toast(toast);
        bsToast.show();
        
        // Remove toast after it's hidden
        toast.addEventListener('hidden.bs.toast', function() {
            toast.remove();
        });
    }
    
    function confirmDeleteAll() {
        if (confirm('⚠️ WARNING: This will permanently delete ALL assets and related records (history, requests).\n\nThis action cannot be undone!\n\nAre you absolutely sure you want to continue?')) {
            if (confirm('FINAL CONFIRMATION: You are about to delete ALL assets.\n\nType "DELETE ALL" to confirm:')) {
                const input = prompt('Type "DELETE ALL" to confirm deletion:');
                if (input === 'DELETE ALL') {
                    deleteAllAssets();
                } else {
                    alert('Deletion cancelled. You must type "DELETE ALL" exactly.');
                }
            }
        }
    }
    
    function deleteAllAssets() {
        fetch('/Assets/DeleteAll', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showToast('Success', data.message, 'success');
                // Reload the page after a short delay
                setTimeout(() => {
                    window.location.reload();
                }, 2000);
            } else {
                showToast('Error', data.message, 'error');
            }
        })
        .catch(error => {
            console.error('Error deleting all assets:', error);
            showToast('Error', 'Network error occurred', 'error');
        });
    }
    
    // Lifecycle Functions
    function markForSalvage(assetTag) {
        if (confirm(`Are you sure you want to mark asset ${assetTag} for salvage?`)) {
            fetch('/Assets/MarkForSalvage', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                },
                body: `assetTag=${encodeURIComponent(assetTag)}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast('Success', data.message, 'success');
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showToast('Error', data.message, 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('Error', 'Failed to mark asset for salvage', 'error');
            });
        }
    }
    
    function deployAsset(assetTag) {
        const desk = prompt('Enter desk location:');
        if (desk) {
            const userName = prompt('Enter user name:');
            if (userName) {
                const userEmail = prompt('Enter user email:');
                if (userEmail) {
                    fetch('/Assets/DeployAsset', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                        },
                        body: JSON.stringify({
                            assetTag: assetTag,
                            desk: desk,
                            userName: userName,
                            userEmail: userEmail
                        })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            showToast('Success', data.message, 'success');
                            setTimeout(() => location.reload(), 1000);
                        } else {
                            showToast('Error', data.message, 'error');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        showToast('Error', 'Failed to deploy asset', 'error');
                    });
                }
            }
        }
    }
    
    function moveToStorage(assetTag) {
        if (confirm('Move asset to storage? (Floor will be set to "Storage" automatically)')) {
            fetch('/Assets/MoveToStorage', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                },
                body: `assetTag=${encodeURIComponent(assetTag)}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast('Success', data.message, 'success');
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showToast('Error', data.message, 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('Error', 'Failed to move asset to storage', 'error');
            });
        }
    }
    
    function markReadyForShipment(assetTag) {
        if (confirm('Mark asset as ready for shipment pickup? (Only Facilities Drivers can pick up)')) {
            fetch('/api/lifecycle/mark-ready-for-shipment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                },
                body: JSON.stringify(assetTag)
            })
            .then(response => response.json())
            .then(data => {
                if (data.message) {
                    showToast('Success', data.message, 'success');
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showToast('Error', 'Failed to mark asset ready for shipment', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('Error', 'Failed to mark asset ready for shipment', 'error');
            });
        }
    }
    
    function pickupAsset(assetTag) {
        const destinationSite = prompt('Enter destination site:');
        if (destinationSite) {
            const carrier = prompt('Enter carrier (optional):');
            const trackingNumber = prompt('Enter tracking number (optional):');
            
            const request = {
                assetTag: assetTag,
                destinationSite: destinationSite,
                carrier: carrier || null,
                trackingNumber: trackingNumber || null
            };
            
            fetch('/api/lifecycle/pickup-asset', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                },
                body: JSON.stringify(request)
            })
            .then(response => response.json())
            .then(data => {
                if (data.message) {
                    showToast('Success', data.message, 'success');
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showToast('Error', 'Failed to pickup asset', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('Error', 'Failed to pickup asset', 'error');
            });
        }
    }
    
    function deliverAsset(assetTag) {
        const toSite = prompt('Enter destination site:');
        if (toSite) {
            const deliveryLocation = prompt('Enter delivery location:');
            if (deliveryLocation) {
                const deliveryFloor = prompt('Enter delivery floor:');
                if (deliveryFloor) {
                    const deliveryDesk = prompt('Enter delivery desk (optional):');
                    
                    const request = {
                        assetTag: assetTag,
                        toSite: toSite,
                        deliveryLocation: deliveryLocation,
                        deliveryFloor: deliveryFloor,
                        deliveryDesk: deliveryDesk || null
                    };
                    
                    fetch('/api/lifecycle/deliver-asset', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                        },
                        body: JSON.stringify(request)
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.message) {
                            showToast('Success', data.message, 'success');
                            setTimeout(() => location.reload(), 1000);
                        } else {
                            showToast('Error', 'Failed to deliver asset', 'error');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        showToast('Error', 'Failed to deliver asset', 'error');
                    });
                }
            }
        }
    }
    
    function reassignLocationAfterDelivery(assetTag) {
        const newLocation = prompt('Enter new location:');
        if (newLocation) {
            const newFloor = prompt('Enter new floor:');
            if (newFloor) {
                const newDesk = prompt('Enter new desk (optional):');
                
                const request = {
                    assetTag: assetTag,
                    newLocation: newLocation,
                    newFloor: newFloor,
                    newDesk: newDesk || null
                };
                
                fetch('/api/lifecycle/reassign-location-after-delivery', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                    },
                    body: JSON.stringify(request)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.message) {
                        showToast('Success', data.message, 'success');
                        setTimeout(() => location.reload(), 1000);
                    } else {
                        showToast('Error', 'Failed to reassign location', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showToast('Error', 'Failed to reassign location', 'error');
                });
            }
        }
    }
    
    function showLifecycleHistory(assetTag) {
        // TODO: Implement lifecycle history view
        alert(`Lifecycle history for ${assetTag} - Coming soon!`);
    }
    
    // Selection Basket Functions
    let selectedAssets = new Set();
    
    function updateSelectionBasket() {
        const basket = document.getElementById('selectionBasket');
        const count = document.getElementById('selectedCount');
        const bulkActionsOption = document.getElementById('bulkActionsOption');
        const bulkActionsCount = document.getElementById('bulkActionsCount');
        
        if (selectedAssets.size > 0) {
            basket.classList.remove('d-none');
            count.textContent = selectedAssets.size;
            bulkActionsOption.style.display = 'block';
            bulkActionsCount.textContent = selectedAssets.size;
        } else {
            basket.classList.add('d-none');
            bulkActionsOption.style.display = 'none';
        }
    }
    
    function toggleAssetSelection(assetTag) {
        if (selectedAssets.has(assetTag)) {
            selectedAssets.delete(assetTag);
        } else {
            selectedAssets.add(assetTag);
        }
        updateSelectionBasket();
    }
    
    function clearSelection() {
        selectedAssets.clear();
        updateSelectionBasket();
        // Uncheck all checkboxes
        document.querySelectorAll('.asset-checkbox').forEach(cb => cb.checked = false);
        // Uncheck select all checkbox
        const selectAllCheckbox = document.getElementById('selectAllCheckbox');
        if (selectAllCheckbox) {
            selectAllCheckbox.checked = false;
        }
        updateBulkDeleteButton();
        
        // Clear saved cart items from sessionStorage
        sessionStorage.removeItem('assetCart');
    }
    
    function clearSearch() {
        window.location.href = '@Url.Action("Index", "Assets")';
    }
    
    // Cart functionality
    function showCartPreview() {
        if (selectedAssets.size === 0) {
            showToast('Info', 'No assets in cart', 'info');
            return;
        }
        
        // Get asset details for selected assets
        const assetTags = Array.from(selectedAssets);
        const cartContent = document.getElementById('cartPreviewContent');
        
        // Show loading
        cartContent.innerHTML = '<div class="text-center"><i class="bi bi-hourglass-split"></i> Loading cart items...</div>';
        
        // Fetch asset details
        fetch('/Assets/GetSelectedAssets', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
            },
            body: JSON.stringify(assetTags)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                displayCartPreview(data.assets);
            } else {
                cartContent.innerHTML = '<div class="alert alert-danger">Error loading cart items</div>';
            }
        })
        .catch(error => {
            console.error('Error:', error);
            cartContent.innerHTML = '<div class="alert alert-danger">Error loading cart items</div>';
        });
        
        // Show the modal
        const modal = new bootstrap.Modal(document.getElementById('cartPreviewModal'));
        modal.show();
    }
    
    function displayCartPreview(assets) {
        const cartContent = document.getElementById('cartPreviewContent');
        
        if (assets.length === 0) {
            cartContent.innerHTML = '<div class="text-center text-muted">No items in cart</div>';
            return;
        }
        
        let html = `
            <div class="row mb-3">
                <div class="col-12">
                    <h6>Selected Assets (${assets.length})</h6>
                </div>
            </div>
            <div class="table-responsive">
                <table class="table table-sm">
                    <thead>
                        <tr>
                            <th>Asset Tag</th>
                            <th>Category</th>
                            <th>Manufacturer</th>
                            <th>Model</th>
                            <th>Location</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
        `;
        
        assets.forEach(asset => {
            html += `
                <tr>
                    <td><strong>${asset.assetTag}</strong></td>
                    <td><span class="badge bg-secondary">${asset.category}</span></td>
                    <td>${asset.manufacturer || '-'}</td>
                    <td>${asset.model || '-'}</td>
                    <td>${asset.location || '-'}</td>
                    <td><span class="badge bg-success">${asset.status}</span></td>
                </tr>
            `;
        });
        
        html += `
                    </tbody>
                </table>
            </div>
            <div class="alert alert-info">
                <i class="bi bi-info-circle"></i> 
                Click "Go to Cart" to manage these assets and perform bulk operations.
            </div>
        `;
        
        cartContent.innerHTML = html;
    }
    
    function goToCart() {
        // Close the preview modal
        const modal = bootstrap.Modal.getInstance(document.getElementById('cartPreviewModal'));
        modal.hide();
        
        // Navigate to cart page with selected assets
        const assetTags = Array.from(selectedAssets).join(',');
        
        // Clear sessionStorage since we're going to the cart page
        sessionStorage.removeItem('assetCart');
        
        window.location.href = `@Url.Action("Cart", "Assets")?assetTags=${encodeURIComponent(assetTags)}`;
    }
    
    function selectMoreItems() {
        // Save current cart items to sessionStorage
        const cartItems = Array.from(selectedAssets);
        sessionStorage.setItem('assetCart', JSON.stringify(cartItems));
        
        // Close the preview modal
        const modal = bootstrap.Modal.getInstance(document.getElementById('cartPreviewModal'));
        modal.hide();
        
        // Show toast notification
        showToast('Info', `${cartItems.length} items saved to cart. You can now select more items.`, 'info');
    }
    
    function restoreCartItems() {
        // Load saved cart items from sessionStorage
        const savedCart = sessionStorage.getItem('assetCart');
        if (savedCart) {
            try {
                const cartItems = JSON.parse(savedCart);
                cartItems.forEach(assetTag => {
                    selectedAssets.add(assetTag);
                    // Check the corresponding checkbox if it exists
                    const checkbox = document.querySelector(`input[type="checkbox"][value="${assetTag}"]`);
                    if (checkbox) {
                        checkbox.checked = true;
                    }
                });
                
                // Update the UI to reflect the restored items
                updateSelectionBasket();
                
                // Show notification if items were restored
                if (cartItems.length > 0) {
                    showToast('Info', `${cartItems.length} items restored from cart`, 'info');
                }
            } catch (error) {
                console.error('Error restoring cart items:', error);
                sessionStorage.removeItem('assetCart');
            }
        }
    }
    
    function exportCurrentView() {
        // Get current search term and sort order to maintain filtering
        const searchTerm = document.querySelector('input[name="searchTerm"]')?.value || '';
        const currentSort = '@ViewData["CurrentSort"]' || '';
        
        // Get current column configuration
        const visibleColumns = currentColumns.filter(col => col.visible).map(col => col.id);
        const columnConfig = visibleColumns.join(',');
        
        // If assets are selected, export only those; otherwise export current view
        if (selectedAssets.size > 0) {
            // Export selected assets
            const params = new URLSearchParams({
                assetTags: Array.from(selectedAssets).join(','),
                searchTerm: searchTerm,
                sortOrder: currentSort
            });
            
            const exportUrl = '@Url.Action("ExportSelectedAssets", "Assets")?' + params.toString();
            
            const a = document.createElement('a');
            a.href = exportUrl;
            a.style.display = 'none';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            
            showToast('Success', `Exporting ${selectedAssets.size} selected assets`, 'success');
        } else {
            // Export current view (all visible assets with current filters and column configuration)
            const params = new URLSearchParams({
                searchTerm: searchTerm,
                sortOrder: currentSort,
                columnConfig: columnConfig
            });
            
            const exportUrl = '@Url.Action("ExportCurrentView", "Assets")?' + params.toString();
            
            const a = document.createElement('a');
            a.href = exportUrl;
            a.style.display = 'none';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            
            showToast('Success', 'Exporting current view', 'success');
        }
    }
    
    function exportAllAssets() {
        // Export all assets with all columns
        const exportUrl = '@Url.Action("ExportAll", "Assets")';
        
        const a = document.createElement('a');
        a.href = exportUrl;
        a.style.display = 'none';
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        
        showToast('Success', 'Exporting all assets', 'success');
    }
    
    function showBulkActions() {
        if (selectedAssets.size === 0) {
            showToast('Info', 'No assets selected', 'info');
            return;
        }
        
        const actions = [
            { name: 'Mark for Salvage', action: 'salvage', icon: 'bi-recycle' },
            { name: 'Move to Storage', action: 'storage', icon: 'bi-box' }
        ];
        
        // Create modal for bulk actions
        const modal = document.createElement('div');
        modal.className = 'modal fade';
        modal.innerHTML = `
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Bulk Actions (${selectedAssets.size} assets)</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="list-group">
                            ${actions.map(action => `
                                <a href="#" class="list-group-item list-group-item-action" onclick="bulkAction('${action.action}')">
                                    <i class="${action.icon}"></i> ${action.name}
                                </a>
                            `).join('')}
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        const bsModal = new bootstrap.Modal(modal);
        bsModal.show();
        
        modal.addEventListener('hidden.bs.modal', function() {
            modal.remove();
        });
    }
    
    function bulkAction(action) {
        const assetTags = Array.from(selectedAssets);
        
        switch (action) {
            case 'salvage':
                if (confirm(`Mark ${assetTags.length} assets for salvage?`)) {
                    fetch('/Assets/BulkMarkForSalvage', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                        },
                        body: JSON.stringify(assetTags)
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            showToast('Success', data.message, 'success');
                            clearSelection();
                            setTimeout(() => location.reload(), 1000);
                        } else {
                            showToast('Error', data.message, 'error');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        showToast('Error', 'Failed to mark assets for salvage', 'error');
                    });
                }
                break;
            case 'storage':
                const storageLocation = prompt('Enter storage location:');
                if (storageLocation) {
                    // TODO: Implement bulk move to storage
                    showToast('Info', 'Bulk move to storage coming soon!', 'info');
                }
                break;

        }
        
        // Close modal
        const modal = document.querySelector('.modal');
        if (modal) {
            const bsModal = bootstrap.Modal.getInstance(modal);
            if (bsModal) bsModal.hide();
        }
    }
    
    // Initialize page
    document.addEventListener('DOMContentLoaded', function() {
        updateBulkDeleteButton();
        initializeTableNavigation();
        updateSelectionBasket();
    });

    // Column Filter Functions
    let currentFilterColumn = '';
    let currentFilterValues = [];
    let allFilterValues = [];

    function showColumnFilter(columnId) {
        currentFilterColumn = columnId;
        const columnNames = {
            'assetTag': 'Asset Tag',
            'serialNumber': 'Serial Number',
            'serviceTag': 'Service Tag',
            'manufacturer': 'Manufacturer',
            'model': 'Model',
            'category': 'Category',
            'netName': 'Net Name',
            'assignedUser': 'Assigned User',
            'department': 'Department',
            'location': 'Location',
            'floor': 'Floor',
            'status': 'Status',
            'vendor': 'Vendor',
            'warrantyEnd': 'Warranty End'
        };

        document.getElementById('filterColumnName').textContent = columnNames[columnId] || columnId;
        
        // Get currently applied filter values from URL
        const urlParams = new URLSearchParams(window.location.search);
        const filterParamName = `filter${columnId.charAt(0).toUpperCase() + columnId.slice(1)}`;
        const currentFilterParam = urlParams.get(filterParamName);
        
        // Parse current filter values
        if (currentFilterParam) {
            currentFilterValues = currentFilterParam.split(',').map(v => v.trim());
        } else {
            currentFilterValues = [];
        }
        
        // Load filter values from server
        fetch(`/Assets/GetFilterValues?column=${columnId}`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    allFilterValues = data.values;
                    populateAvailableValues();
                    populateSelectedValues();
                    
                    // Show the modal
                    const modal = new bootstrap.Modal(document.getElementById('columnFilterModal'));
                    modal.show();
                } else {
                    showToast('Error', 'Failed to load filter values', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('Error', 'Failed to load filter values', 'error');
            });
    }

    function populateAvailableValues() {
        const container = document.getElementById('availableValues');
        container.innerHTML = '';
        
        allFilterValues.forEach(value => {
            if (!currentFilterValues.includes(value)) {
                const div = document.createElement('div');
                div.className = 'form-check';
                div.innerHTML = `
                    <input class="form-check-input" type="checkbox" value="${value}" id="available_${value.replace(/[^a-zA-Z0-9]/g, '_')}" onchange="toggleValue('${value}', true)">
                    <label class="form-check-label" for="available_${value.replace(/[^a-zA-Z0-9]/g, '_')}">
                        ${value}
                    </label>
                `;
                container.appendChild(div);
            }
        });
    }

    function populateSelectedValues() {
        const container = document.getElementById('selectedValues');
        container.innerHTML = '';
        
        currentFilterValues.forEach(value => {
            const div = document.createElement('div');
            div.className = 'form-check';
            div.innerHTML = `
                <input class="form-check-input" type="checkbox" value="${value}" id="selected_${value.replace(/[^a-zA-Z0-9]/g, '_')}" onchange="toggleValue('${value}', false)" checked>
                <label class="form-check-label" for="selected_${value.replace(/[^a-zA-Z0-9]/g, '_')}">
                    ${value}
                </label>
            `;
            container.appendChild(div);
        });
    }

    function toggleValue(value, isAvailable) {
        if (isAvailable) {
            // Moving from available to selected
            currentFilterValues.push(value);
        } else {
            // Moving from selected to available
            currentFilterValues = currentFilterValues.filter(v => v !== value);
        }
        
        populateAvailableValues();
        populateSelectedValues();
    }

    function filterAvailableValues() {
        const searchTerm = document.getElementById('filterSearch').value.toLowerCase();
        const checkboxes = document.querySelectorAll('#availableValues input[type="checkbox"]');
        
        checkboxes.forEach(checkbox => {
            const label = checkbox.nextElementSibling;
            const value = label.textContent.toLowerCase();
            const shouldShow = value.includes(searchTerm);
            label.parentElement.style.display = shouldShow ? 'block' : 'none';
        });
    }

    function clearSelectedValues() {
        currentFilterValues = [];
        populateAvailableValues();
        populateSelectedValues();
    }

    function applyColumnFilter() {
        if (currentFilterValues.length === 0) {
            // Remove filter
            removeColumnFilter(currentFilterColumn);
        } else {
            // Apply filter
            const filterParam = currentFilterValues.join(',');
            applyColumnFilterToUrl(currentFilterColumn, filterParam);
        }
        
        // Close modal
        const modal = bootstrap.Modal.getInstance(document.getElementById('columnFilterModal'));
        modal.hide();
    }

    function applyColumnFilterToUrl(column, values) {
        const url = new URL(window.location);
        const paramName = `filter${column.charAt(0).toUpperCase() + column.slice(1)}`;
        url.searchParams.set(paramName, values);
        url.searchParams.set('page', '1'); // Reset to first page
        window.location.href = url.toString();
    }

    function removeColumnFilter(column) {
        const url = new URL(window.location);
        const paramName = `filter${column.charAt(0).toUpperCase() + column.slice(1)}`;
        url.searchParams.delete(paramName);
        url.searchParams.set('page', '1'); // Reset to first page
        window.location.href = url.toString();
    }

    // Global functions that need to be accessible from HTML elements
    function changePageSize(pageSize) {
        console.log('changePageSize called with:', pageSize);
        const url = new URL(window.location);
        
        // Preserve all current parameters
        const currentParams = new URLSearchParams(window.location.search);
        
        // Set the new page size
        url.searchParams.set('pageSize', pageSize);
        url.searchParams.set('page', '1'); // Reset to first page when changing page size
        
        // Preserve all filter parameters
        const filterParams = [
            'searchTerm', 'sortOrder',
            'filterAssetTag', 'filterSerialNumber', 'filterServiceTag',
            'filterManufacturer', 'filterModel', 'filterCategory',
            'filterNetName', 'filterAssignedUser', 'filterManager',
            'filterDepartment', 'filterLocation', 'filterFloor',
            'filterDesk', 'filterStatus', 'filterVendor', 'filterWarrantyEnd'
        ];
        
        filterParams.forEach(param => {
            const value = currentParams.get(param);
            if (value) {
                url.searchParams.set(param, value);
            }
        });
        
        console.log('Redirecting to:', url.toString());
        window.location.href = url.toString();
    }

    function updateBulkDeleteButton() {
        const selectedCheckboxes = document.querySelectorAll('.asset-checkbox:checked');
        const bulkDeleteBtn = document.getElementById('bulkDeleteBtn');
        
        if (selectedCheckboxes.length > 0) {
            bulkDeleteBtn.style.display = 'inline';
        } else {
            bulkDeleteBtn.style.display = 'none';
        }
        
        // Also update the selection basket
        updateSelectionBasket();
    }

    function toggleSelectAll() {
        const selectAllCheckbox = document.getElementById('selectAllCheckbox');
        const assetCheckboxes = document.querySelectorAll('.asset-checkbox');
        
        assetCheckboxes.forEach(checkbox => {
            checkbox.checked = selectAllCheckbox.checked;
            const assetTag = checkbox.dataset.assetTag;
            if (selectAllCheckbox.checked) {
                selectedAssets.add(assetTag);
            } else {
                selectedAssets.delete(assetTag);
            }
        });
        
        updateBulkDeleteButton();
        updateSelectionBasket();
    }
</script>