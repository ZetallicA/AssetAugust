@model List<AssetManagement.Domain.Entities.Asset>
@using AssetManagement.Domain.Entities

@{
    string GetStatusBadgeClass(AssetLifecycleState state) => state switch
    {
        AssetLifecycleState.InStorage => "bg-secondary",
        AssetLifecycleState.ReadyForShipment => "bg-warning",
        AssetLifecycleState.InTransit => "bg-info",
        AssetLifecycleState.Delivered => "bg-primary",
        AssetLifecycleState.Deployed => "bg-success",
        AssetLifecycleState.RedeployPending => "bg-warning",
        AssetLifecycleState.SalvagePending => "bg-danger",
        AssetLifecycleState.Salvaged => "bg-dark",
        _ => "bg-secondary"
    };
}

@{
    ViewData["Title"] = "Asset Cart";
}

@Html.AntiForgeryToken()

<style>
    .cart-item {
        border: 1px solid #dee2e6;
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 1rem;
        background-color: #fff;
        transition: all 0.2s ease;
    }
    
    .cart-item:hover {
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }
    
    .cart-item.selected {
        border-color: #007bff;
        background-color: #f8f9ff;
    }
    
    .checkout-form {
        background-color: #f8f9fa;
        border-radius: 8px;
        padding: 1.5rem;
        margin-top: 2rem;
    }
    
    .asset-details {
        font-size: 0.9rem;
        color: #6c757d;
    }
    
    .action-buttons {
        display: flex;
        gap: 0.5rem;
        flex-wrap: wrap;
    }
</style>

<div class="row mb-4">
    <div class="col-12">
        <div class="d-flex justify-content-between align-items-center">
            <h1 class="display-6">
                <i class="bi bi-cart3 text-primary"></i> Asset Cart
            </h1>
            <a asp-action="Index" class="btn btn-outline-secondary">
                <i class="bi bi-arrow-left"></i> Back to Assets
            </a>
        </div>
    </div>
</div>

@if (Model != null && Model.Any())
{
    <div class="row">
        <div class="col-md-8">
            <div class="card shadow">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="bi bi-list-check"></i> Selected Assets (@Model.Count)
                    </h5>
                </div>
                <div class="card-body">
                    @foreach (var asset in Model)
                    {
                        <div class="cart-item" data-asset-tag="@asset.AssetTag">
                            <div class="row align-items-center">
                                <div class="col-md-1">
                                    <input type="checkbox" class="form-check-input asset-checkbox" 
                                           value="@asset.AssetTag" checked onchange="updateSelectedAssets()" />
                                </div>
                                <div class="col-md-3">
                                    <h6 class="mb-1">@asset.AssetTag</h6>
                                    <div class="asset-details">
                                        <span class="badge bg-secondary">@asset.Category</span>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="asset-details">
                                        <div><strong>@asset.Manufacturer @asset.Model</strong></div>
                                        <div>Location: @asset.Location - @asset.Floor</div>
                                        <div>Status: <span class="badge @GetStatusBadgeClass(asset.LifecycleState)">@asset.DisplayStatus</span></div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="action-buttons">
                                        <a asp-action="Details" asp-route-id="@asset.Id" class="btn btn-sm btn-outline-primary">
                                            <i class="bi bi-eye"></i> View
                                        </a>
                                        <a asp-action="Edit" asp-route-id="@asset.Id" class="btn btn-sm btn-outline-secondary">
                                            <i class="bi bi-pencil"></i> Edit
                                        </a>
                                        <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeFromCart('@asset.AssetTag')">
                                            <i class="bi bi-trash"></i> Remove
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
        
        <div class="col-md-4">
            <div class="checkout-form">
                <h5 class="mb-3">
                    <i class="bi bi-gear"></i> Cart Actions
                </h5>
                
                <div class="mb-3">
                    <label class="form-label">Bulk Operations</label>
                    <div class="d-grid gap-2">
                        <button type="button" class="btn btn-outline-primary" onclick="bulkMoveToStorage()">
                            <i class="bi bi-box"></i> Move to Storage
                        </button>
                        <button type="button" class="btn btn-outline-warning" onclick="bulkMarkForSalvage()">
                            <i class="bi bi-recycle"></i> Mark for Salvage
                        </button>
                        <button type="button" class="btn btn-outline-info" onclick="bulkExport()">
                            <i class="bi bi-download"></i> Export Selected
                        </button>
                    </div>
                </div>
                
                <hr>
                
                <div class="mb-3">
                    <label class="form-label">Checkout to Location</label>
                    <div class="mb-2">
                        <select class="form-select" id="checkoutLocation" onchange="loadFloorsForLocation()">
                            <option value="">Select Location</option>
                            <option value="100CHURCH">100CHURCH</option>
                            <option value="LIC">LIC</option>
                            <option value="BROOKLYN">BROOKLYN</option>
                            <option value="BRONX">BRONX</option>
                            <option value="STATEN ISLAND">STATEN ISLAND</option>
                            <option value="66JOHN">66JOHN</option>
                        </select>
                    </div>
                    <div class="mb-2">
                        <select class="form-select" id="checkoutFloor">
                            <option value="">Select Floor</option>
                        </select>
                    </div>
                    <div class="mb-2">
                        <input type="text" class="form-control" id="checkoutDesk" placeholder="Desk (Optional)" />
                    </div>
                    <div class="mb-2">
                        <input type="text" class="form-control" id="checkoutUser" placeholder="Assigned User" />
                    </div>
                    <div class="mb-2">
                        <input type="email" class="form-control" id="checkoutEmail" placeholder="User Email" />
                    </div>
                    <button type="button" class="btn btn-success w-100" onclick="checkoutAssets()">
                        <i class="bi bi-check-circle"></i> Checkout Assets
                    </button>
                </div>
                
                <hr>
                
                <div class="d-grid gap-2">
                    <button type="button" class="btn btn-outline-secondary" onclick="clearCart()">
                        <i class="bi bi-trash"></i> Clear Cart
                    </button>
                    <button type="button" class="btn btn-outline-primary" onclick="continueAdding()">
                        <i class="bi bi-arrow-left"></i> Continue Adding..
                    </button>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="text-center py-5">
        <i class="bi bi-cart3 fa-3x text-muted mb-3"></i>
        <h4 class="text-muted">Cart is Empty</h4>
        <p class="text-muted">
            No assets have been selected. Go back to the assets page to add items to your cart.
        </p>
        <a asp-action="Index" class="btn btn-primary">
            <i class="bi bi-arrow-left"></i> Back to Assets
        </a>
    </div>
}

<script>
    let selectedAssets = new Set(@Html.Raw(Json.Serialize(Model?.Select(a => a.AssetTag) ?? new List<string>())));
    
    function updateSelectedAssets() {
        selectedAssets.clear();
        document.querySelectorAll('.asset-checkbox:checked').forEach(checkbox => {
            selectedAssets.add(checkbox.value);
        });
        
        // Update cart items styling
        document.querySelectorAll('.cart-item').forEach(item => {
            const assetTag = item.dataset.assetTag;
            if (selectedAssets.has(assetTag)) {
                item.classList.add('selected');
            } else {
                item.classList.remove('selected');
            }
        });
    }
    
    function removeFromCart(assetTag) {
        if (confirm(`Remove ${assetTag} from cart?`)) {
            selectedAssets.delete(assetTag);
            const item = document.querySelector(`[data-asset-tag="${assetTag}"]`);
            if (item) {
                item.remove();
            }
            
            // Update the cart URL
            const assetTags = Array.from(selectedAssets).join(',');
            const newUrl = `@Url.Action("Cart", "Assets")?assetTags=${encodeURIComponent(assetTags)}`;
            window.history.replaceState({}, '', newUrl);
            
            showToast('Success', `${assetTag} removed from cart`, 'success');
        }
    }
    
    function bulkMoveToStorage() {
        if (selectedAssets.size === 0) {
            showToast('Info', 'No assets selected', 'info');
            return;
        }
        
        if (confirm(`Move ${selectedAssets.size} assets to storage?`)) {
            const assetTags = Array.from(selectedAssets);
            
            fetch('/Assets/BulkMoveToStorage', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                },
                body: JSON.stringify(assetTags)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast('Success', data.message, 'success');
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showToast('Error', data.message, 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('Error', 'Failed to move assets to storage', 'error');
            });
        }
    }
    
    function bulkMarkForSalvage() {
        if (selectedAssets.size === 0) {
            showToast('Info', 'No assets selected', 'info');
            return;
        }
        
        if (confirm(`Mark ${selectedAssets.size} assets for salvage?`)) {
            const assetTags = Array.from(selectedAssets);
            
            fetch('/Assets/BulkMarkForSalvage', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                },
                body: JSON.stringify(assetTags)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast('Success', data.message, 'success');
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showToast('Error', data.message, 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('Error', 'Failed to mark assets for salvage', 'error');
            });
        }
    }
    
    function bulkExport() {
        if (selectedAssets.size === 0) {
            showToast('Info', 'No assets selected', 'info');
            return;
        }
        
        const assetTags = Array.from(selectedAssets).join(',');
        const exportUrl = `@Url.Action("ExportSelectedAssets", "Assets")?assetTags=${encodeURIComponent(assetTags)}`;
        
        const a = document.createElement('a');
        a.href = exportUrl;
        a.style.display = 'none';
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        
        showToast('Success', `Exporting ${selectedAssets.size} selected assets`, 'success');
    }
    

    
    function checkoutAssets() {
        if (selectedAssets.size === 0) {
            showToast('Info', 'No assets selected', 'info');
            return;
        }
        
        const location = document.getElementById('checkoutLocation').value;
        const floor = document.getElementById('checkoutFloor').value;
        const desk = document.getElementById('checkoutDesk').value;
        const user = document.getElementById('checkoutUser').value;
        const email = document.getElementById('checkoutEmail').value;
        
        if (!location || !floor || !user || !email) {
            showToast('Error', 'Please fill in all required fields', 'error');
            return;
        }
        
        if (confirm(`Checkout ${selectedAssets.size} assets to ${location} - ${floor}?`)) {
            const assetTags = Array.from(selectedAssets);
            const checkoutData = {
                assetTags: assetTags,
                location: location,
                floor: floor,
                desk: desk,
                user: user,
                email: email
            };
            
            fetch('/Assets/BulkCheckout', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                },
                body: JSON.stringify(checkoutData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast('Success', data.message, 'success');
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showToast('Error', data.message, 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('Error', 'Failed to checkout assets', 'error');
            });
        }
    }
    
    function clearCart() {
        if (confirm('Clear all items from cart?')) {
            window.location.href = '@Url.Action("Index", "Assets")';
        }
    }
    
    function continueAdding() {
        // Save current cart items to sessionStorage
        const cartItems = Array.from(selectedAssets);
        sessionStorage.setItem('assetCart', JSON.stringify(cartItems));
        
        // Navigate back to assets page
        window.location.href = '@Url.Action("Index", "Assets")';
    }
    
    function loadFloorsForLocation() {
        const location = document.getElementById('checkoutLocation').value;
        const floorSelect = document.getElementById('checkoutFloor');
        
        // Clear current options
        floorSelect.innerHTML = '<option value="">Select Floor</option>';
        
        if (!location) {
            return;
        }
        
        // Fetch floors for the selected location
        fetch(`/Assets/GetFloorsForLocation?location=${encodeURIComponent(location)}`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    data.floors.forEach(floor => {
                        const option = document.createElement('option');
                        option.value = floor.name;
                        option.textContent = floor.name;
                        floorSelect.appendChild(option);
                    });
                } else {
                    showToast('Error', 'Failed to load floors', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('Error', 'Failed to load floors', 'error');
            });
    }
    
    function showToast(title, message, type) {
        // Create toast notification
        const toast = document.createElement('div');
        toast.className = `toast align-items-center text-white bg-${type === 'success' ? 'success' : 'danger'} border-0`;
        toast.setAttribute('role', 'alert');
        toast.setAttribute('aria-live', 'assertive');
        toast.setAttribute('aria-atomic', 'true');
        
        toast.innerHTML = `
            <div class="d-flex">
                <div class="toast-body">
                    <strong>${title}:</strong> ${message}
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        `;
        
        // Add to page if toast container doesn't exist
        let toastContainer = document.getElementById('toast-container');
        if (!toastContainer) {
            toastContainer = document.createElement('div');
            toastContainer.id = 'toast-container';
            toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';
            toastContainer.style.zIndex = '9999';
            document.body.appendChild(toastContainer);
        }
        
        toastContainer.appendChild(toast);
        
        // Show toast
        const bsToast = new bootstrap.Toast(toast);
        bsToast.show();
        
        // Remove toast after it's hidden
        toast.addEventListener('hidden.bs.toast', function() {
            toast.remove();
        });
    }
    
    // Initialize on page load
    document.addEventListener('DOMContentLoaded', function() {
        updateSelectedAssets();
    });
</script>
